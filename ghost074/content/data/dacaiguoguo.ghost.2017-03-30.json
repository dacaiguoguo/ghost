{"meta":{"exported_on":1490856401292,"version":"003"},"data":{"posts":[{"id":1,"uuid":"b935570b-1c44-4379-be55-d9bfce13465e","title":"Welcome to Dacaiguoguo","slug":"welcome-to-ghost","markdown":"You're live! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at `<your blog URL>/ghost/`. When you arrive, you can select this post from a list on the left and see a preview of it on the right. Click the little pencil icon at the top of the preview to edit this post and read the next section!\n\n## Getting Started\n\nGhost uses something called Markdown for writing. Essentially, it's a shorthand way to manage your post formatting as you write!\n\nWriting in Markdown is really easy. In the left hand panel of Ghost, you simply write as you normally would. Where appropriate, you can use *shortcuts* to **style** your content. For example, a list:\n\n* Item number one\n* Item number two\n    * A nested item\n* A final item\n\nor with numbers!\n\n1. Remember to buy some milk\n2. Drink the milk\n3. Tweet that I remembered to buy the milk, and drank it\n\n### Links\n\nWant to link to a source? No problem. If you paste in a URL, like http://ghost.org - it'll automatically be linked up. But if you want to customise your anchor text, you can do that too! Here's a link to [the Ghost website](http://ghost.org). Neat.\n\n### What about Images?\n\nImages work too! Already know the URL of the image you want to include in your article? Simply paste it in like this to make it show up:\n\n![The Ghost Logo](https://ghost.org/images/ghost.png)\n\nNot sure which image you want to use yet? That's ok too. Leave yourself a descriptive placeholder and keep writing. Come back later and drag and drop the image in to upload:\n\n![A bowl of bananas]\n\n\n### Quoting\n\nSometimes a link isn't enough, you want to quote someone on what they've said. Perhaps you've started using a new blogging platform and feel the sudden urge to share their slogan? A quote might be just the way to do it!\n\n> Ghost - Just a blogging platform\n\n### Working with Code\n\nGot a streak of geek? We've got you covered there, too. You can write inline `<code>` blocks really easily with back ticks. Want to show off something more comprehensive? 4 spaces of indentation gets you there.\n    .awesome-thing {\n        display: block;\n        width: 100%;\n    }\n\n### Ready for a Break? \n\nThrow 3 or more dashes down on any new line and you've got yourself a fancy new divider. Aw yeah.\n\n---\n\n### Advanced Usage\n\nThere's one fantastic secret about Markdown. If you want, you can write plain old HTML and it'll still work! Very flexible.\n\n<input type=\"text\" placeholder=\"I'm an input field!\" />\n\nThat should be enough to get you started. Have fun - and let us know what you think :)","html":"<p>You're live! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at <code>&lt;your blog URL&gt;/ghost/</code>. When you arrive, you can select this post from a list on the left and see a preview of it on the right. Click the little pencil icon at the top of the preview to edit this post and read the next section!</p>\n\n<h2 id=\"gettingstarted\">Getting Started</h2>\n\n<p>Ghost uses something called Markdown for writing. Essentially, it's a shorthand way to manage your post formatting as you write!</p>\n\n<p>Writing in Markdown is really easy. In the left hand panel of Ghost, you simply write as you normally would. Where appropriate, you can use <em>shortcuts</em> to <strong>style</strong> your content. For example, a list:</p>\n\n<ul>\n<li>Item number one</li>\n<li>Item number two\n<ul><li>A nested item</li></ul></li>\n<li>A final item</li>\n</ul>\n\n<p>or with numbers!</p>\n\n<ol>\n<li>Remember to buy some milk  </li>\n<li>Drink the milk  </li>\n<li>Tweet that I remembered to buy the milk, and drank it</li>\n</ol>\n\n<h3 id=\"links\">Links</h3>\n\n<p>Want to link to a source? No problem. If you paste in a URL, like <a href=\"http://ghost.org\">http://ghost.org</a> - it'll automatically be linked up. But if you want to customise your anchor text, you can do that too! Here's a link to <a href=\"http://ghost.org\">the Ghost website</a>. Neat.</p>\n\n<h3 id=\"whataboutimages\">What about Images?</h3>\n\n<p>Images work too! Already know the URL of the image you want to include in your article? Simply paste it in like this to make it show up:</p>\n\n<p><img src=\"https://ghost.org/images/ghost.png\" alt=\"The Ghost Logo\" /></p>\n\n<p>Not sure which image you want to use yet? That's ok too. Leave yourself a descriptive placeholder and keep writing. Come back later and drag and drop the image in to upload:</p>\n\n<h3 id=\"quoting\">Quoting</h3>\n\n<p>Sometimes a link isn't enough, you want to quote someone on what they've said. Perhaps you've started using a new blogging platform and feel the sudden urge to share their slogan? A quote might be just the way to do it!</p>\n\n<blockquote>\n  <p>Ghost - Just a blogging platform</p>\n</blockquote>\n\n<h3 id=\"workingwithcode\">Working with Code</h3>\n\n<p>Got a streak of geek? We've got you covered there, too. You can write inline <code>&lt;code&gt;</code> blocks really easily with back ticks. Want to show off something more comprehensive? 4 spaces of indentation gets you there. <br />\n    .awesome-thing {\n        display: block;\n        width: 100%;\n    }</p>\n\n<h3 id=\"readyforabreak\">Ready for a Break?</h3>\n\n<p>Throw 3 or more dashes down on any new line and you've got yourself a fancy new divider. Aw yeah.</p>\n\n<hr />\n\n<h3 id=\"advancedusage\">Advanced Usage</h3>\n\n<p>There's one fantastic secret about Markdown. If you want, you can write plain old HTML and it'll still work! Very flexible.</p>\n\n<p><input type=\"text\" placeholder=\"I'm an input field!\" /></p>\n\n<p>That should be enough to get you started. Have fun - and let us know what you think :)</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1434701394154,"created_by":1,"updated_at":1434703959515,"updated_by":1,"published_at":1434701394188,"published_by":1},{"id":2,"uuid":"3ffa96c6-8a18-4876-8f35-76e6cda17aa9","title":"查找xib中的某类字段","slug":"cha-zhao-xibzhong-de-mou-lei-zi-duan","markdown":"#####1.查找系统字体\n先在xib中找到系统字体的字段是system，然后遍历文件目录找出所有xib中的此字段。\n```\nfunction findsystemfont(){\necho $1\nfor file in `ls $1`\ndo\n \nfind $file |xargs grep \"fontDescription\\\" type=\\\"system\\\"\" && echo $file && echo \"------------------------------------------------------------------------------------------------\"\ndone\n}\n```\n#####1.同理找出加粗的系统字体\n```\nfunction findxibBoldSystemFontAll(){ \n\tfor file in `ls $1 | grep xib` \n\tdo\n        find $1\"/\"$file |xargs grep \"fontDescription\\\" type=\\\"boldSystem\\\"\" && echo $file  && echo \"----------end------------------\\n\"\n\tdone\n\tfor file in `ls $1` \n\tdo\n\t\tif [ -d $1\"/\"$file ]; then\n\t\t\tfindxibBoldSystemFontAll $1\"/\"$file\n\t\tfi\n\tdone\n}\n```","html":"<h5 id=\"1\">1.查找系统字体</h5>\n\n<p>先在xib中找到系统字体的字段是system，然后遍历文件目录找出所有xib中的此字段。</p>\n\n<pre><code>function findsystemfont(){  \necho $1  \nfor file in `ls $1`  \ndo\n\nfind $file |xargs grep \"fontDescription\\\" type=\\\"system\\\"\" &amp;&amp; echo $file &amp;&amp; echo \"------------------------------------------------------------------------------------------------\"  \ndone  \n}\n</code></pre>\n\n<h5 id=\"1\">1.同理找出加粗的系统字体</h5>\n\n<pre><code>function findxibBoldSystemFontAll(){  \n    for file in `ls $1 | grep xib` \n    do\n        find $1\"/\"$file |xargs grep \"fontDescription\\\" type=\\\"boldSystem\\\"\" &amp;&amp; echo $file  &amp;&amp; echo \"----------end------------------\\n\"\n    done\n    for file in `ls $1` \n    do\n        if [ -d $1\"/\"$file ]; then\n            findxibBoldSystemFontAll $1\"/\"$file\n        fi\n    done\n}\n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1434719671314,"created_by":1,"updated_at":1435498531885,"updated_by":1,"published_at":1434720191117,"published_by":1},{"id":3,"uuid":"200b3402-61d1-43e8-847f-ad10cca0a769","title":"ssh断开后继续运行","slug":"sshduan-kai-hou-ji-xu-yun-xing","markdown":"#####1.先安装screen\n```\nyum install screen\n```\n#####2.使用screen创建一个子Shell,名为ghost\n```\nscreen -S ghost\n```\n这时就可以断开了。\n#####3.断开后下次怎么找到这个Shell，再进行操作呢？\n```\nscreen  -D -R ghost\n```\n","html":"<h5 id=\"1screen\">1.先安装screen</h5>\n\n<pre><code>yum install screen  \n</code></pre>\n\n<h5 id=\"2screenshellghost\">2.使用screen创建一个子Shell,名为ghost</h5>\n\n<pre><code>screen -S ghost  \n</code></pre>\n\n<p>这时就可以断开了。</p>\n\n<h5 id=\"3shell\">3.断开后下次怎么找到这个Shell，再进行操作呢？</h5>\n\n<pre><code>screen  -D -R ghost  \n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1434720301792,"created_by":1,"updated_at":1435498520213,"updated_by":1,"published_at":1434720528261,"published_by":1},{"id":4,"uuid":"72070a90-78c6-4b30-9f33-d1bd2c8c4d29","title":"sips压缩图片","slug":"sipsya-suo-tu-pian","markdown":"#####sips压缩图片宽度640，适用UI给的图比较大的时候，预览速度慢的时候\n```\nfunction zippngTo640Width(){ \n\tfor file in `ls $1 | grep png` \n\tdo\n        sips --resampleWidth 640 $1\"/\"$file\n\tdone\n\tfor file in `ls $1` \n\tdo\n\t\tif [ -d $1\"/\"$file ]; then\n\t\t\tzippngTo640Width $1\"/\"$file\n\t\tfi\n\tdone\n}\n```","html":"<h5 id=\"sips640ui\">sips压缩图片宽度640，适用UI给的图比较大的时候，预览速度慢的时候</h5>\n\n<pre><code>function zippngTo640Width(){  \n    for file in `ls $1 | grep png` \n    do\n        sips --resampleWidth 640 $1\"/\"$file\n    done\n    for file in `ls $1` \n    do\n        if [ -d $1\"/\"$file ]; then\n            zippngTo640Width $1\"/\"$file\n        fi\n    done\n}\n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1434720696080,"created_by":1,"updated_at":1435498504736,"updated_by":1,"published_at":1434720790809,"published_by":1},{"id":5,"uuid":"289e1442-bf18-4f90-8e6f-a7a9829bec0b","title":"Provisioning Profiles 文件转换","slug":"ba-librarymobiledeviceprovisioning-profiles-xia-de-wen-jian-zhuan-wei-ke-yi-kan-dong-de-plistwen-jian","markdown":"#####把~/Library/MobileDevice/Provisioning\\ Profiles 下的文件转为可以看懂的plist文件\n```\nfunction provisioningFileToPlist(){\n\tpwddir=`pwd`\n\techo $pwddir\n\tcd ~/Library/MobileDevice/Provisioning\\ Profiles/\n\tfor file in `ls $1`  \n\tdo\n\t\tsecurity cms -D -i $file -o $file.plist\n\t\tout=`/usr/libexec/PlistBuddy -c \"Print :Name\" $file.plist 2> /dev/null`\n\t\techo $out\n\t\tmv $file.plist $pwddir/\"Provisioning\"/$out.plist\n\tdone\n\tcd $pwddir\n}\n```","html":"<h5 id=\"tlibrarymobiledeviceprovisioningprofilesplist\">把~/Library/MobileDevice/Provisioning\\ Profiles 下的文件转为可以看懂的plist文件</h5>\n\n<pre><code>function provisioningFileToPlist(){  \n    pwddir=`pwd`\n    echo $pwddir\n    cd ~/Library/MobileDevice/Provisioning\\ Profiles/\n    for file in `ls $1`  \n    do\n        security cms -D -i $file -o $file.plist\n        out=`/usr/libexec/PlistBuddy -c \"Print :Name\" $file.plist 2&gt; /dev/null`\n        echo $out\n        mv $file.plist $pwddir/\"Provisioning\"/$out.plist\n    done\n    cd $pwddir\n}\n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1434720823729,"created_by":1,"updated_at":1435498490558,"updated_by":1,"published_at":1434720892966,"published_by":1},{"id":6,"uuid":"5ee97c82-f453-4be1-9ece-43f244b2883e","title":"codesign显示应用签名信息","slug":"codesignxian-shi-ying-yong-qian-ming-xin-xi","markdown":"#####显示应用签名信息\n```\ncodesign -vv -d test.app\n\nExecutable=/Users/me/Desktop/test/Payload/test.app/test\nIdentifier=com.testapp.testapp\nFormat=bundle with Mach-O universal (armv7 armv7s)\nCodeDirectory v=20100 size=36441 flags=0x0(none) hashes=1818+5 location=embedded\nSignature size=3483\nAuthority=Apple iPhone OS Application Signing\nAuthority=Apple iPhone Certification Authority\nAuthority=Apple Root CA\nInfo.plist entries=35\nTeamIdentifier=KB7T8S4E4U\nSealed Resources version=2 rules=5 files=1240\nInternal requirements count=1 size=100\n```\n\n```\ncodesign --display -r- Payload/test.app \nExecutable=/Users/me/Desktop/test/Payload/test.app/test\ndesignated => anchor apple generic and certificate leaf[field.1.2.840.113635.100.6.1.3] /* exists */ and identifier \"com.test.test\"\n```","html":"<h5 id=\"\">显示应用签名信息</h5>\n\n<pre><code>codesign -vv -d test.app\n\nExecutable=/Users/me/Desktop/test/Payload/test.app/test  \nIdentifier=com.testapp.testapp  \nFormat=bundle with Mach-O universal (armv7 armv7s)  \nCodeDirectory v=20100 size=36441 flags=0x0(none) hashes=1818+5 location=embedded  \nSignature size=3483  \nAuthority=Apple iPhone OS Application Signing  \nAuthority=Apple iPhone Certification Authority  \nAuthority=Apple Root CA  \nInfo.plist entries=35  \nTeamIdentifier=KB7T8S4E4U  \nSealed Resources version=2 rules=5 files=1240  \nInternal requirements count=1 size=100  \n</code></pre>\n\n<pre><code>codesign --display -r- Payload/test.app  \nExecutable=/Users/me/Desktop/test/Payload/test.app/test  \ndesignated =&gt; anchor apple generic and certificate leaf[field.1.2.840.113635.100.6.1.3] /* exists */ and identifier \"com.test.test\"  \n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1434720940874,"created_by":1,"updated_at":1435498478491,"updated_by":1,"published_at":1434721082198,"published_by":1},{"id":7,"uuid":"1e75d53b-5e5d-4dbc-b911-f2d2a66d9edf","title":"shenzhen 使用说明","slug":"ipa-usage-sh-add","markdown":"\n#####shenzhen 是命令行编译发布ipa的工具。用起来很方便，是用ruby写的\ngithub地址在 https://github.com/nomad/shenzhen\n\n```\nipa build -w App.xcworkspace -s Scheme -m \"XYZ.mobileprovision\" -i \"YYY\" --xcargs 'CODE_SIGN_ENTITLEMENTS=\"Entitlements.plist\" CODE_SIGN_IDENTITY=\"iPhone Distribution: XXX (YYY)\"'\n\n-w App.xcworkspace\n-s Scheme\n-m \"XYZ.mobileprovision\"\n-i \"YYY\"\n--xcargs 'CODE_SIGN_ENTITLEMENTS=\"Entitlements.plist\" CODE_SIGN_IDENTITY=\"iPhone Distribution: XXX (YYY)\"'\n-c Release  or Debug \n```","html":"<h5 id=\"shenzheniparuby\">shenzhen 是命令行编译发布ipa的工具。用起来很方便，是用ruby写的</h5>\n\n<p>github地址在 <a href=\"https://github.com/nomad/shenzhen\">https://github.com/nomad/shenzhen</a></p>\n\n<pre><code>ipa build -w App.xcworkspace -s Scheme -m \"XYZ.mobileprovision\" -i \"YYY\" --xcargs 'CODE_SIGN_ENTITLEMENTS=\"Entitlements.plist\" CODE_SIGN_IDENTITY=\"iPhone Distribution: XXX (YYY)\"'\n\n-w App.xcworkspace\n-s Scheme\n-m \"XYZ.mobileprovision\"\n-i \"YYY\"\n--xcargs 'CODE_SIGN_ENTITLEMENTS=\"Entitlements.plist\" CODE_SIGN_IDENTITY=\"iPhone Distribution: XXX (YYY)\"'\n-c Release  or Debug \n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1434721126014,"created_by":1,"updated_at":1435498466841,"updated_by":1,"published_at":1434721208094,"published_by":1},{"id":8,"uuid":"041fbe4b-c659-45a4-b5c3-410cc723905c","title":"wget 下载超长 Url","slug":"wget-xia-zai-bai-du-wang-pan-wen-jian","markdown":"######wget 下载会遇到url太长的问题，把url 加上双引号，再用-O 输出到指定文件，就OK了\n```\nwget 'http://lx.cdn.baidupcs.com/file/99b22d57e71bdc86b8fbe113dfb9f739?bkt=p2-nj-638&xcode=324dd88a9d2bd625704e270870994e1b10bc30ccc5480581d796109456bd1356&fid=3657458272-250528-819951192935751&time=1432109208&sign=FDTAXERLBH-DCb740ccc5511e5e8fedcff06b081203-sVC055LYVYLRsfMLVcAQ9SV%2B1mQ%3D&to=hc&fm=Nan,B,T,t&sta_dx=2180&sta_cs=690&sta_ft=dmg&sta_ct=6&newver=1&newfm=1&flow_ver=3&sl=81199180&expires=8h&rt=sh&r=537379126&mlogid=1093747484&vuk=3657458272&vbdid=1855355706&fin=xcode_5.1.1.dmg&slt=pm&uta=0' -O xcode511.dmg\n```","html":"<h6 id=\"wgeturlurlook\">wget 下载会遇到url太长的问题，把url 加上双引号，再用-O 输出到指定文件，就OK了</h6>\n\n<pre><code>wget 'http://lx.cdn.baidupcs.com/file/99b22d57e71bdc86b8fbe113dfb9f739?bkt=p2-nj-638&amp;xcode=324dd88a9d2bd625704e270870994e1b10bc30ccc5480581d796109456bd1356&amp;fid=3657458272-250528-819951192935751&amp;time=1432109208&amp;sign=FDTAXERLBH-DCb740ccc5511e5e8fedcff06b081203-sVC055LYVYLRsfMLVcAQ9SV%2B1mQ%3D&amp;to=hc&amp;fm=Nan,B,T,t&amp;sta_dx=2180&amp;sta_cs=690&amp;sta_ft=dmg&amp;sta_ct=6&amp;newver=1&amp;newfm=1&amp;flow_ver=3&amp;sl=81199180&amp;expires=8h&amp;rt=sh&amp;r=537379126&amp;mlogid=1093747484&amp;vuk=3657458272&amp;vbdid=1855355706&amp;fin=xcode_5.1.1.dmg&amp;slt=pm&amp;uta=0' -O xcode511.dmg  \n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1434721386327,"created_by":1,"updated_at":1435498455112,"updated_by":1,"published_at":1434721505651,"published_by":1},{"id":9,"uuid":"e5e3a02b-d164-4a28-b8fd-4964b14711f8","title":"用代码实现将常用色值添加到ColorPicker中","slug":"nscolorlist","markdown":"![NSColorList](/content/images/2015/06/NSColorList.png)\n\n#### NSColorList\n用代码实现将常用色值添加到_ColorPicker_中\n用正则分析了代码中的变量\n\n\n######1. 颜色命名 要以c开头 以Color 结尾\n```\nNSString *const cTextBlack_Color = @\"00000064\"; //一号字体黑色 0,0,0\n```\n######2.要16进制的色值\n\n######3.正则tips，在Xcode 里有转义\n```\nNSString *regularExpress = @\"c\\\\w*Color\\\\s.*\\\";\";\n\\\\w 字母数字下划线\n* 重复不限次数\n\\\\s 空格\n. 为不限字符\n```\n######4.代码如下,github 地址 https://github.com/dacaiguoguo/NSColorList\n```\n//\n//  main.m\n//  NSColorList\n//\n//  Created by sunyanguo on 4/6/15.\n//  Copyright (c) 2015 sunyanguo. All rights reserved.\n//\n\n#import <Foundation/Foundation.h>\n#import <AppKit/AppKit.h>\n\n//字体颜色\nNSString *const cTextBlack_Color = @\"00000064\"; //一号字体黑色 0,0,0\nNSString *const cTextDarkGray_Color = @\"66666664\"; //二号字体黑灰色 102,102,102\nNSString *const cTextLightGray_Color = @\"aaaaaa64\"; //三号字体灰色 170,170,170\nNSString *const cTextWhite_Color = @\"ffffff64\"; //四号字体白色 255,255,255\nNSString *const cTextRed_Color = @\"d3077564\"; //价格字体红色 211,7,117\n\n//主色调\nNSString *const cMainBackground_Color = @\"f8f8f864\"; //主背景色 248,248,248\nNSString *const cMainRed_Color = @\"d3077564\"; //主色调红色 211,7,117\nNSString *const cMainBlack_Color = @\"3232325f\"; //主色调黑色 50,50,50 透明度95%\nNSString *const cMainWhite_Color = @\"ffffff64\"; //主色调白色 255,255,255\n\n//辅助色\nNSString *const cAssistBlue_Color = @\"5598dc64\"; //辅助色蓝色 85,152,220\nNSString *const cAssistOrange_Color = @\"ff740d64\"; //辅助色橙色 255,116,13\nNSString *const cAssistGreen_Color = @\"7bc73064\"; //辅助色绿色 123,199,48\nNSString *const cAssistPurple_Color = @\"c672e164\"; //辅助色紫色 198,114,225\nNSString *const cAssistGray_Color = @\"aaaaaa64\"; //辅助色灰色 170,170,170\n\nNSString *const cLine_Split_Cell_Color = @\"dddddd64\"; //Cell分割线颜色 221,221,221\n\nNSString *const cBackground_CellSelected_Color = @\"eeeeee64\"; //Cell选中颜色 238,238,238\n\nNSString *const cBackground_DialogMessage_Color = @\"18181864\"; //提示框背景色\nNSString *const cText_DialogMessage_Color = @\"a3a3a364\"; //提示框字体颜色\n\nNSColor *hexColor(NSString *hexColor) {\n    if ([hexColor hasPrefix:@\"#\"]) {\n        hexColor = [hexColor substringFromIndex:1];\n    }\n    if ([hexColor length] == 6) {\n        hexColor = [hexColor stringByAppendingString:@\"64\"];\n    }\n    unsigned int red, green, blue, alpha;\n    NSRange range;\n    range.length = 2;\n    \n    range.location = 0;\n    [[NSScanner scannerWithString:[hexColor substringWithRange:range]] scanHexInt:&red];\n    range.location = 2;\n    [[NSScanner scannerWithString:[hexColor substringWithRange:range]] scanHexInt:&green];\n    range.location = 4;\n    [[NSScanner scannerWithString:[hexColor substringWithRange:range]] scanHexInt:&blue];\n    range.location = 6;\n    [[NSScanner scannerWithString:[hexColor substringWithRange:range]] scanHexInt:&alpha];\n    \n    return [NSColor colorWithCalibratedRed:(float)(red/255.0f) green:(float)(green/255.0f) blue:(float)(blue/255.0f) alpha:(float)(alpha/100.0f)];\n}\n\n\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        // insert code here...\n        \n        NSString *filePath = [NSString stringWithUTF8String:__FILE__];\n        NSString *fileContent = [NSString stringWithContentsOfFile:filePath\n                                                          encoding:NSUTF8StringEncoding\n                                                             error:nil];\n        \n        NSMutableArray *subColorNameArray = [NSMutableArray new];\n        NSMutableArray *subColorValueArray = [NSMutableArray new];\n\n        NSString *regularExpress = @\"c\\\\w*Color\\\\s.*\\\";\";\n        NSRange range = [fileContent rangeOfString:regularExpress options:NSRegularExpressionSearch];\n \n        NSRange holeRange = NSMakeRange(0, fileContent.length);\n        while (range.location != NSNotFound) {\n            NSString *sub = [fileContent substringWithRange:range];\n            NSArray *subArray =[sub componentsSeparatedByString:@\"=\"];\n            NSString *value = subArray[1];\n            value = [value stringByReplacingOccurrencesOfString:@\"@\" withString:@\"\"];\n            value = [value stringByReplacingOccurrencesOfString:@\"\\\"\" withString:@\"\"];\n            value = [value stringByReplacingOccurrencesOfString:@\";\" withString:@\"\"];\n            value = [value stringByReplacingOccurrencesOfString:@\" \" withString:@\"\"];\n            value = [value stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];\n            [subColorValueArray addObject:value];\n\n            value = subArray[0];\n            value = [value stringByReplacingOccurrencesOfString:@\"\\\"\" withString:@\"\"];\n            value = [value stringByReplacingOccurrencesOfString:@\" \" withString:@\"\"];\n            value = [value stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];\n            [subColorNameArray addObject:value];\n            NSRange searchRange = NSMakeRange(NSMaxRange(range), holeRange.length -NSMaxRange(range));\n//            NSLog(@\"%@\",NSStringFromRange(searchRange));\n            range = [fileContent rangeOfString:regularExpress options:NSRegularExpressionSearch range:searchRange];\n        }\n        NSLog(@\"%@\",subColorNameArray);\n        NSLog(@\"%@\",subColorValueArray);\n        assert([subColorValueArray count] == [subColorNameArray count]);\n        if ([subColorNameArray count] == 0) {\n            return 0;\n        }\n//        NSColorList *list2 = [[NSColorList alloc] initWithName:@\"Custom\" fromFile:[@\"~/Library/Colors/Custom.clr\" stringByStandardizingPath]]; // 这里要绝对路径\n        \n        NSColorList *list = [[NSColorList alloc] init];\n        for ( int i=0; i< [subColorNameArray count]; i++) {\n            [list setColor:hexColor(subColorValueArray[i]) forKey:subColorNameArray[i]];\n        }\n        \n        \n//       NSColorList *colorList = [NSColorList colorListNamed:@\"Apple\"];\n        [list setColor:hexColor(cMainRed_Color) forKey:@\"test4\"];\n//       BOOL ret = [list writeToFile:[@\"~/Library/Colors/Custom.clr\" stringByStandardizingPath]];\n        NSString *fileppp = @\"~/Library/Colors/custom.clr\";\n        NSString *writePath = [fileppp stringByStandardizingPath];// 这里要绝对路径\n        BOOL ret = [list writeToFile:writePath];\n\n        assert(ret);\n        NSLog(@\"%@\",list);\n        \n//        NSLog(@\"%@\",[NSColorList availableColorLists]);//输出所有的可以用的颜色列表\n    }\n    return 0;\n}\n\n```\nOVER","html":"<p><img src=\"/content/images/2015/06/NSColorList.png\" alt=\"NSColorList\" /></p>\n\n<h4 id=\"nscolorlist\">NSColorList</h4>\n\n<p>用代码实现将常用色值添加到<em>ColorPicker</em>中\n用正则分析了代码中的变量</p>\n\n<h6 id=\"1ccolor\">1. 颜色命名 要以c开头 以Color 结尾</h6>\n\n<pre><code>NSString *const cTextBlack_Color = @\"00000064\"; //一号字体黑色 0,0,0  \n</code></pre>\n\n<h6 id=\"216\">2.要16进制的色值</h6>\n\n<h6 id=\"3tipsxcode\">3.正则tips，在Xcode 里有转义</h6>\n\n<pre><code>NSString *regularExpress = @\"c\\\\w*Color\\\\s.*\\\";\";  \n\\\\w 字母数字下划线\n* 重复不限次数\n\\\\s 空格\n. 为不限字符\n</code></pre>\n\n<h6 id=\"4githubhttpsgithubcomdacaiguoguonscolorlist\">4.代码如下,github 地址 <a href=\"https://github.com/dacaiguoguo/NSColorList\">https://github.com/dacaiguoguo/NSColorList</a></h6>\n\n<pre><code>//\n//  main.m\n//  NSColorList\n//\n//  Created by sunyanguo on 4/6/15.\n//  Copyright (c) 2015 sunyanguo. All rights reserved.\n//\n\n#import &lt;Foundation/Foundation.h&gt;\n#import &lt;AppKit/AppKit.h&gt;\n\n//字体颜色\nNSString *const cTextBlack_Color = @\"00000064\"; //一号字体黑色 0,0,0  \nNSString *const cTextDarkGray_Color = @\"66666664\"; //二号字体黑灰色 102,102,102  \nNSString *const cTextLightGray_Color = @\"aaaaaa64\"; //三号字体灰色 170,170,170  \nNSString *const cTextWhite_Color = @\"ffffff64\"; //四号字体白色 255,255,255  \nNSString *const cTextRed_Color = @\"d3077564\"; //价格字体红色 211,7,117\n\n//主色调\nNSString *const cMainBackground_Color = @\"f8f8f864\"; //主背景色 248,248,248  \nNSString *const cMainRed_Color = @\"d3077564\"; //主色调红色 211,7,117  \nNSString *const cMainBlack_Color = @\"3232325f\"; //主色调黑色 50,50,50 透明度95%  \nNSString *const cMainWhite_Color = @\"ffffff64\"; //主色调白色 255,255,255\n\n//辅助色\nNSString *const cAssistBlue_Color = @\"5598dc64\"; //辅助色蓝色 85,152,220  \nNSString *const cAssistOrange_Color = @\"ff740d64\"; //辅助色橙色 255,116,13  \nNSString *const cAssistGreen_Color = @\"7bc73064\"; //辅助色绿色 123,199,48  \nNSString *const cAssistPurple_Color = @\"c672e164\"; //辅助色紫色 198,114,225  \nNSString *const cAssistGray_Color = @\"aaaaaa64\"; //辅助色灰色 170,170,170\n\nNSString *const cLine_Split_Cell_Color = @\"dddddd64\"; //Cell分割线颜色 221,221,221\n\nNSString *const cBackground_CellSelected_Color = @\"eeeeee64\"; //Cell选中颜色 238,238,238\n\nNSString *const cBackground_DialogMessage_Color = @\"18181864\"; //提示框背景色  \nNSString *const cText_DialogMessage_Color = @\"a3a3a364\"; //提示框字体颜色\n\nNSColor *hexColor(NSString *hexColor) {  \n    if ([hexColor hasPrefix:@\"#\"]) {\n        hexColor = [hexColor substringFromIndex:1];\n    }\n    if ([hexColor length] == 6) {\n        hexColor = [hexColor stringByAppendingString:@\"64\"];\n    }\n    unsigned int red, green, blue, alpha;\n    NSRange range;\n    range.length = 2;\n\n    range.location = 0;\n    [[NSScanner scannerWithString:[hexColor substringWithRange:range]] scanHexInt:&amp;red];\n    range.location = 2;\n    [[NSScanner scannerWithString:[hexColor substringWithRange:range]] scanHexInt:&amp;green];\n    range.location = 4;\n    [[NSScanner scannerWithString:[hexColor substringWithRange:range]] scanHexInt:&amp;blue];\n    range.location = 6;\n    [[NSScanner scannerWithString:[hexColor substringWithRange:range]] scanHexInt:&amp;alpha];\n\n    return [NSColor colorWithCalibratedRed:(float)(red/255.0f) green:(float)(green/255.0f) blue:(float)(blue/255.0f) alpha:(float)(alpha/100.0f)];\n}\n\n\n\nint main(int argc, const char * argv[]) {  \n    @autoreleasepool {\n        // insert code here...\n\n        NSString *filePath = [NSString stringWithUTF8String:__FILE__];\n        NSString *fileContent = [NSString stringWithContentsOfFile:filePath\n                                                          encoding:NSUTF8StringEncoding\n                                                             error:nil];\n\n        NSMutableArray *subColorNameArray = [NSMutableArray new];\n        NSMutableArray *subColorValueArray = [NSMutableArray new];\n\n        NSString *regularExpress = @\"c\\\\w*Color\\\\s.*\\\";\";\n        NSRange range = [fileContent rangeOfString:regularExpress options:NSRegularExpressionSearch];\n\n        NSRange holeRange = NSMakeRange(0, fileContent.length);\n        while (range.location != NSNotFound) {\n            NSString *sub = [fileContent substringWithRange:range];\n            NSArray *subArray =[sub componentsSeparatedByString:@\"=\"];\n            NSString *value = subArray[1];\n            value = [value stringByReplacingOccurrencesOfString:@\"@\" withString:@\"\"];\n            value = [value stringByReplacingOccurrencesOfString:@\"\\\"\" withString:@\"\"];\n            value = [value stringByReplacingOccurrencesOfString:@\";\" withString:@\"\"];\n            value = [value stringByReplacingOccurrencesOfString:@\" \" withString:@\"\"];\n            value = [value stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];\n            [subColorValueArray addObject:value];\n\n            value = subArray[0];\n            value = [value stringByReplacingOccurrencesOfString:@\"\\\"\" withString:@\"\"];\n            value = [value stringByReplacingOccurrencesOfString:@\" \" withString:@\"\"];\n            value = [value stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];\n            [subColorNameArray addObject:value];\n            NSRange searchRange = NSMakeRange(NSMaxRange(range), holeRange.length -NSMaxRange(range));\n//            NSLog(@\"%@\",NSStringFromRange(searchRange));\n            range = [fileContent rangeOfString:regularExpress options:NSRegularExpressionSearch range:searchRange];\n        }\n        NSLog(@\"%@\",subColorNameArray);\n        NSLog(@\"%@\",subColorValueArray);\n        assert([subColorValueArray count] == [subColorNameArray count]);\n        if ([subColorNameArray count] == 0) {\n            return 0;\n        }\n//        NSColorList *list2 = [[NSColorList alloc] initWithName:@\"Custom\" fromFile:[@\"~/Library/Colors/Custom.clr\" stringByStandardizingPath]]; // 这里要绝对路径\n\n        NSColorList *list = [[NSColorList alloc] init];\n        for ( int i=0; i&lt; [subColorNameArray count]; i++) {\n            [list setColor:hexColor(subColorValueArray[i]) forKey:subColorNameArray[i]];\n        }\n\n\n//       NSColorList *colorList = [NSColorList colorListNamed:@\"Apple\"];\n        [list setColor:hexColor(cMainRed_Color) forKey:@\"test4\"];\n//       BOOL ret = [list writeToFile:[@\"~/Library/Colors/Custom.clr\" stringByStandardizingPath]];\n        NSString *fileppp = @\"~/Library/Colors/custom.clr\";\n        NSString *writePath = [fileppp stringByStandardizingPath];// 这里要绝对路径\n        BOOL ret = [list writeToFile:writePath];\n\n        assert(ret);\n        NSLog(@\"%@\",list);\n\n//        NSLog(@\"%@\",[NSColorList availableColorLists]);//输出所有的可以用的颜色列表\n    }\n    return 0;\n}\n</code></pre>\n\n<p>OVER</p>","image":"/content/images/2015/06/NSColorList.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1434721918535,"created_by":1,"updated_at":1435498443209,"updated_by":1,"published_at":1434722294815,"published_by":1},{"id":10,"uuid":"b190a9c2-25ca-44d3-a6ee-841829864a27","title":"解决安装WordPress主题及插件需要输入FTP问题","slug":"jie-jue-an-zhuang-wordpresszhu-ti-ji-cha-jian-xu-yao-shu-ru-ftpwen-ti","markdown":"解决安装WordPress主题及插件需要输入FTP问题\n\n使用Wordpress程序架构的网站如果需要在网站后台升级、安装主题或者插件的时候，总是会提示需要我们提供FTP信息的界面。有这样的字样提示\"要执行请求的操作，WordPress需要访问您网页服务器的权限。请输入您的FTP登陆凭据以继续。如果您忘记了您的登陆凭据(如用户名、密码)，请联系您的网站托管商\"。这个是比较麻烦的，现在就尝试解决一下！ \n\n如果我们安装的是lnmp一键安装包，那可以使用。授权组来解决。\n\n```chown -R www /home/wwwroot/www.ooo.cn```(修改成网站域名目录)","html":"<p>解决安装WordPress主题及插件需要输入FTP问题</p>\n\n<p>使用Wordpress程序架构的网站如果需要在网站后台升级、安装主题或者插件的时候，总是会提示需要我们提供FTP信息的界面。有这样的字样提示\"要执行请求的操作，WordPress需要访问您网页服务器的权限。请输入您的FTP登陆凭据以继续。如果您忘记了您的登陆凭据(如用户名、密码)，请联系您的网站托管商\"。这个是比较麻烦的，现在就尝试解决一下！ </p>\n\n<p>如果我们安装的是lnmp一键安装包，那可以使用。授权组来解决。</p>\n\n<p><code>chown -R www /home/wwwroot/www.ooo.cn</code>(修改成网站域名目录)</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1435498298309,"created_by":1,"updated_at":1435498428324,"updated_by":1,"published_at":1435498395706,"published_by":1},{"id":11,"uuid":"ef617b82-d820-41a3-8bf8-012b0affb7e9","title":"mac查看网络路由表和统计数据","slug":"maccha-kan-wang-luo-lu-you-biao-he-tong-ji-shu-ju","markdown":"##OS X Mavericks: 查看网络路由表和统计数据\n使用网络实用工具来检查电脑的网络路由表或查看使用常用网络协议发送和接收的信息包类型的详细摘要。\n\n信息包摘要由 TCP、UDP、IP、ICMP、IGMP、IPSEC、IP6、ICMP6、IPSEC6 和 PFKEY 提供。\n\n打开“网络实用工具”，然后点按“Netstat”。\n选择您想要查看的信息类型，然后点按“Netstat”按钮。\n有关解释结果的帮助，或者有关底层 netstat 命令以及如何使用它来生成其他报告的信息，请打开“终端”（位于“应用程序”文件夹的“实用工具”文件夹中）并键入：\n\n`man netstat`\n\n命令行显示\n\n`netstat -r`","html":"<h2 id=\"osxmavericks\">OS X Mavericks: 查看网络路由表和统计数据</h2>\n\n<p>使用网络实用工具来检查电脑的网络路由表或查看使用常用网络协议发送和接收的信息包类型的详细摘要。</p>\n\n<p>信息包摘要由 TCP、UDP、IP、ICMP、IGMP、IPSEC、IP6、ICMP6、IPSEC6 和 PFKEY 提供。</p>\n\n<p>打开“网络实用工具”，然后点按“Netstat”。\n选择您想要查看的信息类型，然后点按“Netstat”按钮。\n有关解释结果的帮助，或者有关底层 netstat 命令以及如何使用它来生成其他报告的信息，请打开“终端”（位于“应用程序”文件夹的“实用工具”文件夹中）并键入：</p>\n\n<p><code>man netstat</code></p>\n\n<p>命令行显示</p>\n\n<p><code>netstat -r</code></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1435566376563,"created_by":1,"updated_at":1435566418396,"updated_by":1,"published_at":1435566407820,"published_by":1},{"id":12,"uuid":"66032f98-e26d-4220-917b-fd7bb5d6f5ee","title":"番茄工作法","slug":"fan-qie-gong-zuo-fa","markdown":"转自：\nhttp://kanari.logdown.com/posts/2015/02/23/os-x-development-from-complete-noob-to-almost-not-a-noob\n\n<!DOCTYPE HTML>\n<html>\n<head>\n抱着寒假不能就这么荒废掉的想法，在最后这几天捡起了OS X开发的学习。高三的时候本来想学一下，但最后还是颓过去了。<br>\n　　在OS X上写应用程序其实是个不怎么好入门的玩意儿。首先你要么得会Objective-C，要么得会Swift，其次你还得会用各种API。OS X开发的整个模式与在Windows下开发都不同，而且你不能一知半解：很多东西是互相关联的。因此我这几天过的非常痛苦。</p>\n\n<p>　　我将在下面简要写一下这几天的学习成果，一来是造福社会，二来是自己以后忘了也还能回来看看。<br>\n　　由于自己也是接触不久，下面的内容难免有一些错误。如果找到了错误，希望各位能够在留言中指出。</p>\n<h2>Objective-C</h2>\n<p>　　首先要讲的就是这门语言。直到最近为止，这都是OS X开发的唯一语言。而这门语言之所以能火，也正是因为不学它没法给iPhone开发App。<br>\n　　我是看的《Objective-C基础教程》学的Obj-C语法。不得不说，这本书写的非常烂。翻译很差，而且书本身讲的也不细，花了大量笔墨讲毫无意义的东西，还插入很多不必要的代码。<br>\n　　其实苹果官方给了很多非常详尽的文档，可以在<a href=\"https://developer.apple.com/library/mac/navigation/\">Mac Developer Library</a>找到。这里推荐看<a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html\">Programming with Objective-C</a>来学习基本语法。<br>\n　　下面讲一些重点内容：</p>\n<h3>类</h3>\n<p>　　Obj-C是直接由C语言改造过来的，因此在类的表示与定义上与C++有很大区别。<br>\n　　Obj-C所有的类的实例变量都是以指针形式存储的，在运行时动态分配内存。<br>\n　　也正是因此，比较两个类的实例时不能用==比较，而应该用isEqual:方法。<br>\n　　一个子类的指针可以被赋给一个父类的指针。<br>\n　　Obj-C使用引用计数进行垃圾回收。现在可以使用ARC进行自动垃圾回收，不需要手动管理内存。</p>\n<h3>属性（property）</h3>\n<p>　　属性就是类的数据。当然也可以定义实例变量。不是特别清楚有什么差别= =似乎实例变量只能用dot notation访问，而且只有实例变量才算父子关系？<br>\n　　在.h文件中定义的属性需要在.m文件中synthesize。如果不显式synthesize，则会默认隐式synthesize成属性名称前面加下划线。<br>\n　　属性的常用属性（attributes of properties……才意识到这两个词是一个意思）有：</p>\n\n<ul>\n<li>\n<code>weak</code>（<code>assgin</code>），不增加引用计数</li>\n<li>\n<code>strong</code>（<code>retain</code>），增加引用计数</li>\n<li>\n<code>copy</code>，复制赋值。常用情况有，需要存储一个<code>NSString *</code>的名字字符串，传入了一个<code>NSMutableString *</code>。如果不用<code>copy</code>属性，则这一属性会随着外面的<code>NSMutableString *</code>的改变而改变。</li>\n<li>\n<code>readonly</code>、<code>readwrite</code>（默认）</li>\n<li>\n<code>setter=</code>、<code>getter=</code>\n</li>\n</ul>\n<h3>协议（protocol）</h3>\n<p>　　协议其实就是一系列的成员方法。一个类遵从一个协议，则需要声明并定义协议中指定的一些方法。协议也包括可选的方法。</p>\n<h3>category与class extension</h3>\n<p>　　category就是对一个类的拓展，可以在不修改类的声明的情况下向类增加成员函数。<br>\n　　class extension则是在对应.m文件中的匿名category，但可以增加属性。主要的用处是，在.h文件中声明一个<code>readonly</code>属性时，如果需要在.m文件中对其赋值，则可以在.m上声明class extension，再次声明一个<code>readwrite</code>的同名属性。</p>\n<h3>Key-Value Coding（KVC）与Key-Value Observing（KVO）</h3>\n<p>　　KVC支持在运行时通过一个字符串来访问或设置属性。<br>\n　　假设有一个类对象<code>myObject</code>有一个<code>readwrite</code>的属性<code>name</code>，那么可以通过<code>[myObject valueForKey:@\"name\"]</code>来访问，通过<code>[myObject setValue:@\"xxxxx\" forKey:@\"name\"]</code>来赋值。<br>\n　　KVO则可以通过KVC，在一个属性发生改变时向另一个类对象发出消息。如果有另一个对象<code>observerObject</code>想要观测<code>myObject</code>的<code>name</code>的变化，则可以通过<code>addObserver:forKeyPath:options:context:</code>方法设置。而这个对象自己需要定义<code>observeValueForKeyPath:ofObject:change:context:</code>来接受观测值被改变的消息。<br>\n　　KVC和KVO体现了Obj-C的动态特性，同时也是后面很多设计方法的基础。</p>\n<h2>架构</h2>\n<p>　　从这里开始就比较蛋疼了，很多概念都互相关联。<br>\n　　一个建议是，开始时先不要理会Interface Builder，可以考虑直接在代码中创建控件。IB在一定程度上反而会复杂化问题。</p>\n<h3>代理（delegate）</h3>\n<p>　　可以对一些类对象其代理对象。代理对象是一个类对象，通常其类必须遵从某一特定的协议。比如<code>NSPopover</code>的代理需要遵从<code>NSPopoverDelegate</code>协议。<br>\n　　代理对象决定了类对象的一些行为。比如<code>NSUserNotificationCenter</code>（通知中心）的代理可以决定一个通知是否该被发出，并在通知被激活的时候进行处理。</p>\n<h3>控制器（controller）</h3>\n<p>　　可以对一个控件设置其控制器。控制器也是决定控件的行为，比如<code>NSView</code>（视图）的控制器可以控制控件的绘制、在控件被显示时进行初始化、处理视图上其他空间触发的事件。<br>\n　　我的理解中，控制器和代理的不同大概在于，控制器完全就是用来控制控件的，而代理通常只是“兼任”。被控制器所控制的控件应该是控制器的<code>strong</code>属性。</p>\n<h3>Model-View-Controller（MVC）模型</h3>\n<p>　　这是苹果提出的一个程序设计范例。即把内在逻辑与外部形象分开，并用控制器在两者间通信。</p>\n<h3>事件处理</h3>\n<p>　　Obj-C的事件分为两类：event和action。<br>\n　　这一部分很复杂，我也没看太懂，只懂很简单的用法。请参见文档<a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/EventOverview/Introduction/Introduction.html#//apple_ref/doc/uid/10000060i-CH1-SW1\">Cocoa Event Handling Guide</a>。</p>\n<h4>Event</h4>\n<p>　　Event是输入设备触发的，如按键或者鼠标点击。<br>\n　　一个鼠标event会首先传递给被点击的对象，如果这一对象不对其做出响应，则传递给响应链（responder chain）上的下一个对象。一个键盘event则会首先传给first responder，大概可以理解为当前的焦点。<br>\n　　默认情况下，一个对象在响应链上的下一个对象是其父对象。如果一个对象要对event做出响应，则这一对象需要定义对应的方法。比如鼠标右击的方法是<code>- (void)rightMouseDown:(NSEvent *)event</code>。举个例子，假设用户右击了一个按钮，如果按钮没有定义右击方法，则事件传递给包含按钮的视图；再下去会传递给窗体，再下去会是窗体的控制器。<br>\n　　我个人感觉上事件处理这里通过定义方法来响应的处理方式，有点像遵从协议。</p>\n<h4>Action</h4>\n<p>　　Action通常是程序内部传递的动作。类对象可以设置<code>target</code>和<code>action</code>。当它们被触发时，会调用对应的<code>target</code>的<code>action</code>方法。这里<code>action</code>是一个方法的选择器（seletor，其实就是函数指针），这个方法接受一个<code>id</code>类型（即任意类型的指针）的参数。<code>target</code>也可以为<code>nil</code>，这时action会在响应链上传递。<br>\n　　Action的响应链有别于Event的响应链，而且十分复杂，我也不是很懂。请参见文档。<br>\n　　如果对一个<code>NSButton</code>设定target-action，则其会在mouse up的时机触发action。</p>\n<h3>Interface Builder（IB）</h3>\n<p>　　创建界面的图形化工具。其实光靠这个是满足不了需求的，因为更多的时候我们会用到动态的界面，比如我们会改变文本框的文字，修改窗口大小，在菜单中增加删除项目等。<br>\n　　关于IB两个最蛋疼的概念就是File's Owner和First Responder。关于First Responder可以参见上面提到的文档。File's Owner通常被设定为控件的控制器的类。</p>\n<h2>我的第一个（大）工程</h2>\n<p>　　关于概念什么的我也没什么好扯的了，毕竟自己也不太懂。下面来讲讲我的第一个工程 Halt（中止）。图标是自己P的。<br><img src=\"http://user-image.logdown.io/user/6158/blog/6167/post/255897/KMdCt2JoSdCsowzEo0cH_QQ20150223-1.png\" alt=\"QQ20150223-1.png\"><br>\n　　写这个程序的初衷是为了提醒我自己定时休息。Halt是一个常驻状态栏的程序，单击图标会弹出一个窗口（<code>NSPopover</code>），告诉你你还剩多少时间（= =），右击则可以弹出菜单。<br><img src=\"http://user-image.logdown.io/user/6158/blog/6167/post/255897/qYDc3hQdQi6EzY7pasJ6_%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-02-23%20%E4%B8%8B%E5%8D%889.50.31.png\" alt=\"屏幕快照 2015-02-23 下午9.50.31.png\"><br><img src=\"http://user-image.logdown.io/user/6158/blog/6167/post/255897/Tmu5igZJTCHE6IZuJEoY_%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-02-23%20%E4%B8%8B%E5%8D%889.50.18.png\" alt=\"屏幕快照 2015-02-23 下午9.50.18.png\"><br>\n　　Halt有四种状态：工作、推迟、休息和停止。工作状态的时间结束后会询问用户是否休息，不休息则进入推迟。推迟时间到后可以继续推迟，直到达到了推迟上线，这时就必须休息。休息时会有一个覆盖整个屏幕的半透明窗口一直处于最前面，使得用户无法操作。休息结束后可以停止，或者是再次回到工作状态。与用户的交互通过系统的通知消息（<code>NSUserNotification</code>，其实本来不应该是干这个的）完成。<br><img src=\"http://user-image.logdown.io/user/6158/blog/6167/post/255897/0bZGsYNjS8OqZsV2VcKh_%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-02-23%20%E4%B8%8B%E5%8D%889.54.49.png\" alt=\"屏幕快照 2015-02-23 下午9.54.49.png\"><br>\n　　代码被我放在了GitHub上：<a href=\"https://www.github.com/huzecong/halt-osx/\">链接</a>。</p>\n<h3>架构</h3>\n<p>　　分文件具体介绍一下实现。</p>\n<h4>MainMenu.xib与AppDelegate类</h4>\n<p>　　<code>MainMenu</code>是程序最先载入的界面，<code>AppDelegate</code>是其代理，也是整个程序最核心的控制部分。<br>\n　　<code>AppDelegate</code>中有<code>TimerPopoverDelegate</code>、<code>TimerInfo</code>的指针，前者是弹出窗口的代理，后者则是程序内在逻辑的处理（Model部分）。还有一个<code>NSStatusItem</code>，用于显示状态栏图标，其<code>view</code>属性被我设置成了<code>RHStatusItemView</code>，GitHub上一个开源的封装好了的类，可以支持左右键单击事件。左键单击通过target-action绑定了弹出窗口代理的方法，右键则直接弹出菜单。</p>\n\n<ul>\n<li>关于菜单必须说一句，菜单项（<code>NSMenuItem</code>）如果没有设置对应的action，则会显示成不可使用的灰色。我是在IB中设计的菜单，然后直接链接到了<code>AppDelegate</code>中对应的<code>IBAction</code>，但似乎没有效果。最后只能在代码初始化的方法中手动给菜单项设置action。</li>\n<li>但事实上，如果只在IB中设置，好像只有Debug生成的程序中的菜单不可用，Release生成似乎还是可用的。</li>\n</ul>\n<h4>TimerPopoverWindow.xib与TimerPopoverDelegate类</h4>\n<p>　　<code>TimerPopoverWindow</code>中只有一个窗口，是用作弹出窗口的分离窗口的。弹出窗口如上面的截图中所示，就是系统自带的日历程序中，单击一个事件后弹出的那种。日历中的窗口是可以分离的，拖住窗口往旁边扯就能分离出一个小窗口。<br>\n　　<code>TimerPopoverDelegate</code>是弹出窗口的代理，包含了<code>NSPopover</code>和<code>TimerPopoverViewController</code>的指针。前者就是弹出窗口，后者这是弹出窗口的视图控制器。由于<code>NSPopover</code>需要自己指定视图，故需要自己设计一个控制器。<br>\n　　代理在被要求显示弹出窗口时即时对其初始化，并在弹出窗口关闭后析构。代理定义了两个代理的方法：<code>detachableWindowForPopover:</code>和<code>- (BOOL)popoverShouldDetach:(NSPopover *)popover</code>。前者返回提供的分离窗口，后者则是返回一个布尔值，代表是否允许分离。这个方法在官方文档中没有写（因为<code>NSPopover</code>在Yosemite中作了大幅改动），是我在stackoverflow上查到的。</p>\n\n<ul>\n<li>这部分代码基本上是参照官方提供的样例代码<a href=\"https://developer.apple.com/library/mac/samplecode/Popover/Introduction/Intro.html\">Popover</a>写的。这份代码中直接将<code>AppDelegate</code>作为弹出窗口的代理，与我的代码不同。这里我也遇到了一个问题，就是代理中的<code>TimerPopoverViewController</code>对象并不会自己初始化，而<code>Popover</code>代码中并没有对其初始化。这里卡了我很久，后来才想到在代理的初始化方法中进行如下的初始化：\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>viewController = [[TimerPopoverViewController alloc] initWithNibName:@\"TimerPopoverView\" bundle:[NSBundle mainBundle]];\n</pre></div>\n</figure>\n</li>\n</ul>\n<h4>TimerPopoverView.xib与TimerPopoverViewController类</h4>\n<p>　　即弹出窗口的视图，如截图所示。这里定义了一个用来刷新时间显示的<code>NSTimer</code>（定时器），同时也有一个<code>TimerInfo</code>的<code>weak</code>引用，用于获取具体的信息。为了支持多语言，我用了很多很裸的<code>NSLocalizedString</code>，弄得代码很丑……应该有更好的写法。</p>\n\n<ul>\n<li>关于<code>NSTimer</code>的设置，似乎有两种初始化方法，一种直接设置target-action，另一种则用了<code>NSInvocation</code>……不是很清楚有什么区别，虽然代码里两种都用了= =</li>\n</ul>\n<h4>TimerInfo类与TimerLogic类</h4>\n<p>　　<code>TimerLogic</code>类来自之前写的另一个倒计时小程序，对<code>NSTimer</code>进行了封装，支持开始暂停结束以及返回剩余时间。<code>TimerInfo</code>包含了一个<code>TimerLogic</code>的指针，还有一堆属性，包括各个模式时间长度、允许推迟的次数、已推迟的次数、当前模式，还有用于切换模式的一些成员方法。<br>\n　　这里定时器到时间时的触发方法是<code>AppDelegate</code>中的方法。<br>\n　　<code>AppDelegate</code>还设置了对于其包含的<code>TimerInfo</code>对象的当前模式的observer，并在监测改变的方法对View部分进行修改，包括更改状态栏图标、修改右键菜单、打开阻止操作的窗口、发送通知。</p>\n<h3>遇到的大问题</h3>\n<h4>关于打开用于阻挡操作的窗口</h4>\n<p>　　开始我的想法是另外写一个控制器来控制这个窗口，后来发现把窗口调到最前面来，也不知道为什么= =<br>\n　　后来直接在<code>AppDelegate</code>里声明了一个窗口，并在要弹出的时候即时初始化，在用窗口的<code>makeKeyAndOrderFront:</code>方法前置，再将用<code>[NSApp activateIgnoringOtherApps:YES]</code>赋予应用程序焦点。同时实现<code>applicationDidResignActive:</code>方法，在应用程序失去焦点的时候再强行赋予焦点之后把窗口提前。虽然不太优美，但能达到效果。<br>\n　　随之问题就来了：第二次点中止按钮会崩溃。查Crash Report看到是系统的自动释放池那里出了问题，心想卧槽这关我什么事啊……后来查到发现这是因为存在多余的<code>release</code>操作，导致产生了僵尸对象（这个说法还挺形象）。用Instruments可以检测Zombies，各种查，发现是第二次打开窗口的时候会崩溃。<br>\n　　最后我改成了，在应用程序初始化的时候就初始化窗口，但是不显示。打开窗口的时候只是前置，关闭时只是用窗口的<code>orderOut:</code>方法将其隐去。具体为什么会出现Zombie我也不是很清楚，不过stackoverflow上有这个<a href=\"http://stackoverflow.com/questions/13345378/why-does-this-simple-nswindow-creation-code-trigger-an-autorelease-pool-crash-on\">帖子</a>和这个<a href=\"http://stackoverflow.com/questions/8377747/zombie-event-in-cocoa\">帖子</a>，讲到了另外的用<code>NSWindow</code>时会出现Zombie的情况，还比较有意思。</p>\n<h4>关于通知消息与通知中心</h4>\n<p>　　通知消息其实有两种，<code>NSNotification</code>和<code>NSUserNotification</code>，但他们有本质上的不同。前者是程序内传递的消息，后者才是截图中那种通知。<br>\n　　说实话，通知中心这一块我感觉是整个程序里最复杂的部分，我查了许多资料才搞定。官方文档里有一份文档讲如何使用通知，但讲的很不详细，而且大部分是针对iOS开发的。<br>\n　　下面一个一个讲我遇到的问题：</p>\n\n<ol>\n<li><p>第一个问题就是，通知只有文字，没有按钮（actionButton）。<br>\n　　这是因为通知有两种形式：banner和alert，默认情况下都是banner，而banner是不带按钮的（在系统设置里也可以设置）。<br>\n　　要更改这个，需要在<code>Info.plist</code>中添加一项名为<code>NSUserNotificationAlertStyle</code>，值为<code>alert</code>。（不过这么说来，整个应用程序都只能有一种通知？）</p></li>\n<li><p>第二个问题是，当应用程序处于激活状态时，默认不会发出通知。<br>\n　　<code>NSUserNotificationCenterDelegate</code>协议中有一个方法<code>userNotificationCenter:shouldPresentNotification:</code>，在发送通知前会调用，如果返回<code>YES</code>则一定发送。将<code>defaultUserNotificationCenter</code>的代理设为<code>AppDelegate</code>对象自身，再实现这个函数，一直返回<code>YES</code>即可。</p></li>\n<li>\n<p>第三个问题是，我不知道用户到底采取了什么行动。<br>\n　　虽然<code>NSUserNotification</code>有<code>activationType</code>属性，但我不知道用户什么时候才会响应通知，在响应之前<code>activationType</code>一直都会是<code>...None</code>。<br>\n　　在代理协议中还有另外两个方法<code>userNotificationCenter:didDeliverNotification:</code>和<code>userNotificationCenter:didActivateNotification:</code>，分别在通知被发出和被响应时调用。当用户点击消息内容，或者单击<code>actionButton</code>时，会调用后者方法，而且传入的<code>NSUserNotification</code>对象的<code>activationType</code>属性会设置为对应的响应方式。但是，如果用户点了关闭，则不会调用这一方法。<br>\n　　我在网上找到了一个有点像黑科技的解决方法= =在<code>didDeliverNotification</code>的方法中加入下面这一段：</p>\n\n<figure class=\"figure-code code\"><div class=\"highlight\"><pre>dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0),\n           ^{\n               BOOL notificationStillPresent;\n               do {\n                   notificationStillPresent = NO;\n                   for (NSUserNotification *nox in [[NSUserNotificationCenter defaultUserNotificationCenter] deliveredNotifications]) {\n                       if ([nox.identifier isEqualToString:notification.identifier]) notificationStillPresent = YES;\n                   }\n                   if (notificationStillPresent) [NSThread sleepForTimeInterval:0.20f];\n               } while (notificationStillPresent);\n               dispatch_async(dispatch_get_main_queue(), ^{\n                   [self handleNotification:notification];\n               });\n           });\n</pre></div>\n</figure><p>　　<code>dispatch_async</code>会在另外的线程上调用这一block（其实就是lambda函数），它会不停在<code>deliveredNotifications</code>中寻找，看这一通知是否还存在。如果用户点了关闭，则这一通知会从<code>deliveredNotifications</code>中被删去，这时就会调用另一个自定义的方法来处理这一通知。<br>\n　　这一方法虽然不够优美，但确实有效。</p>\n</li>\n<li><p>第四个问题是，如果单击消息内容，则通知不会消失。<br>\n　　Alert形式的通知似乎不会自动消失，必须要手动点关闭或者actionButton，但如果单击消息内容，通知是不会消失的。<br>\n　　其实也很好办，通知中心有成员方法<code>removeDeliveredNotification:</code>，只要在<code>didActivateNotification:</code>中调用就好。<br>\n　　但并没有这么简单……我试了这一方法，并没有效果。我还在网上查到了一个私有API<code>_removeDisplayedNotification:</code>，同样没有效果。<br>\n　　最后发现，是移除通知要求通知必须设定<code>identifier</code>，和问题3中的代码要求一样。因为事实上，代码中定义的通知、通知中心中存储的通知、传入给代理方法的通知都并不是同一个通知，虽然内容一样，但地址并不相同：可以想象在发送通知时通知中心会自己复制通知，这也合情合理。因此要识别通知，只能靠<code>identifier</code>。</p></li>\n<li><p>关于处理用户响应，还有一个问题。<br>\n　　如果单击了<code>actionButton</code>，则消息会被处理两遍。经实验，<code>didActivateNotification:</code>会首先被调用，然后上面这段代码才会检测到通知被处理。我开始的想法是，不实现<code>didActivateNotification:</code>了，直接用这段代码处理，但又有两个问题：一是单击消息内容时，由于通知不会消失，也就不会被这段代码检测到；二是这段代码获取的通知，其<code>activationType</code>永远是<code>...None</code>，毕竟是在为<code>...None</code>的时候复制得到的。<br>\n　　所以我还是实现了<code>didActivateNotification:</code>，并在其中也调用了<code>[self handleNotification:notification]</code>方法。我在通知的<code>identifier</code>中加入了发出的时间，差不多可以认为是唯一的标示符，并在<code>handleNotification:</code>方法中记录下了上一次处理的通知<code>identifier</code>，以判断是否处理过。在方法的最后，我调用了<code>removeDeliveredNotification:</code>将其消除掉，以处理单击内容的情况。</p></li>\n<li><p><code>actionButton</code>只有一个，而我需要两个按钮。<br>\n　　通知有一个<code>additionalActions</code>属性，是一个<code>NSArray</code>的对象，似乎是可以显示更多的按钮。但我这里一直没法显示，也不知道为什么。最后只好用<code>otherButtonTitle</code>改了关闭按钮的名字= =</p></li>\n</ol>\n<p>　　关于通知还有不少黑科技，比如如何像iTunes那样把原本应该显示AppIcon的图像改成专辑封面，或者是像Reminder和App Store那样在按钮处显示一个下拉菜单。这些都有苹果自己的私有API可以实现，但如果要把应用程序提交打App Store上的话，就不能用这些API……</p>\n<h2>后记</h2>\n<p>　　一不留神就写了这么长。代码也是，加起来估计有差不多30kb了（主要是名字都太特么长了）。整个工程大概花了我4个(下午+晚上)（早上都睡过去了，吃完早饭就差不多11点了）。<br>\n　　还有，我本以为写了这个程序我就能按时休息= =但事实是我会一直postpone，最后halt的时候会去玩手机……</p>\n</body>\n</html>\n","html":"<p>转自：\n<a href=\"http://kanari.logdown.com/posts/2015/02/23/os-x-development-from-complete-noob-to-almost-not-a-noob\">http://kanari.logdown.com/posts/2015/02/23/os-x-development-from-complete-noob-to-almost-not-a-noob</a></p>\n\n<p><!DOCTYPE HTML> <br />\n<html> <br />\n<head> <br />\n抱着寒假不能就这么荒废掉的想法，在最后这几天捡起了OS X开发的学习。高三的时候本来想学一下，但最后还是颓过去了。<br>\n　　在OS X上写应用程序其实是个不怎么好入门的玩意儿。首先你要么得会Objective-C，要么得会Swift，其次你还得会用各种API。OS X开发的整个模式与在Windows下开发都不同，而且你不能一知半解：很多东西是互相关联的。因此我这几天过的非常痛苦。</p></p>\n\n<p>　　我将在下面简要写一下这几天的学习成果，一来是造福社会，二来是自己以后忘了也还能回来看看。<br>  \n　　由于自己也是接触不久，下面的内容难免有一些错误。如果找到了错误，希望各位能够在留言中指出。</p>\n\n<h2>Objective-C</h2>  \n\n<p>　　首先要讲的就是这门语言。直到最近为止，这都是OS X开发的唯一语言。而这门语言之所以能火，也正是因为不学它没法给iPhone开发App。<br>  \n　　我是看的《Objective-C基础教程》学的Obj-C语法。不得不说，这本书写的非常烂。翻译很差，而且书本身讲的也不细，花了大量笔墨讲毫无意义的东西，还插入很多不必要的代码。<br>\n　　其实苹果官方给了很多非常详尽的文档，可以在<a href=\"https://developer.apple.com/library/mac/navigation/\">Mac Developer Library</a>找到。这里推荐看<a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html\">Programming with Objective-C</a>来学习基本语法。<br>\n　　下面讲一些重点内容：</p>\n\n<h3>类</h3>  \n\n<p>　　Obj-C是直接由C语言改造过来的，因此在类的表示与定义上与C++有很大区别。<br>  \n　　Obj-C所有的类的实例变量都是以指针形式存储的，在运行时动态分配内存。<br>\n　　也正是因此，比较两个类的实例时不能用==比较，而应该用isEqual:方法。<br>\n　　一个子类的指针可以被赋给一个父类的指针。<br>\n　　Obj-C使用引用计数进行垃圾回收。现在可以使用ARC进行自动垃圾回收，不需要手动管理内存。</p>\n\n<h3>属性（property）</h3>  \n\n<p>　　属性就是类的数据。当然也可以定义实例变量。不是特别清楚有什么差别= =似乎实例变量只能用dot notation访问，而且只有实例变量才算父子关系？<br>  \n　　在.h文件中定义的属性需要在.m文件中synthesize。如果不显式synthesize，则会默认隐式synthesize成属性名称前面加下划线。<br>\n　　属性的常用属性（attributes of properties……才意识到这两个词是一个意思）有：</p>\n\n<ul>  \n<li>  \n<code>weak</code>（<code>assgin</code>），不增加引用计数</li>  \n<li>  \n<code>strong</code>（<code>retain</code>），增加引用计数</li>  \n<li>  \n<code>copy</code>，复制赋值。常用情况有，需要存储一个<code>NSString *</code>的名字字符串，传入了一个<code>NSMutableString *</code>。如果不用<code>copy</code>属性，则这一属性会随着外面的<code>NSMutableString *</code>的改变而改变。</li>  \n<li>  \n<code>readonly</code>、<code>readwrite</code>（默认）</li>  \n<li>  \n<code>setter=</code>、<code>getter=</code>  \n</li>  \n</ul>  \n\n<h3>协议（protocol）</h3>  \n\n<p>　　协议其实就是一系列的成员方法。一个类遵从一个协议，则需要声明并定义协议中指定的一些方法。协议也包括可选的方法。</p>  \n\n<h3>category与class extension</h3>  \n\n<p>　　category就是对一个类的拓展，可以在不修改类的声明的情况下向类增加成员函数。<br>  \n　　class extension则是在对应.m文件中的匿名category，但可以增加属性。主要的用处是，在.h文件中声明一个<code>readonly</code>属性时，如果需要在.m文件中对其赋值，则可以在.m上声明class extension，再次声明一个<code>readwrite</code>的同名属性。</p>\n\n<h3>Key-Value Coding（KVC）与Key-Value Observing（KVO）</h3>  \n\n<p>　　KVC支持在运行时通过一个字符串来访问或设置属性。<br>  \n　　假设有一个类对象<code>myObject</code>有一个<code>readwrite</code>的属性<code>name</code>，那么可以通过<code>[myObject valueForKey:@\"name\"]</code>来访问，通过<code>[myObject setValue:@\"xxxxx\" forKey:@\"name\"]</code>来赋值。<br>\n　　KVO则可以通过KVC，在一个属性发生改变时向另一个类对象发出消息。如果有另一个对象<code>observerObject</code>想要观测<code>myObject</code>的<code>name</code>的变化，则可以通过<code>addObserver:forKeyPath:options:context:</code>方法设置。而这个对象自己需要定义<code>observeValueForKeyPath:ofObject:change:context:</code>来接受观测值被改变的消息。<br>\n　　KVC和KVO体现了Obj-C的动态特性，同时也是后面很多设计方法的基础。</p>\n\n<h2>架构</h2>  \n\n<p>　　从这里开始就比较蛋疼了，很多概念都互相关联。<br>  \n　　一个建议是，开始时先不要理会Interface Builder，可以考虑直接在代码中创建控件。IB在一定程度上反而会复杂化问题。</p>\n\n<h3>代理（delegate）</h3>  \n\n<p>　　可以对一些类对象其代理对象。代理对象是一个类对象，通常其类必须遵从某一特定的协议。比如<code>NSPopover</code>的代理需要遵从<code>NSPopoverDelegate</code>协议。<br>  \n　　代理对象决定了类对象的一些行为。比如<code>NSUserNotificationCenter</code>（通知中心）的代理可以决定一个通知是否该被发出，并在通知被激活的时候进行处理。</p>\n\n<h3>控制器（controller）</h3>  \n\n<p>　　可以对一个控件设置其控制器。控制器也是决定控件的行为，比如<code>NSView</code>（视图）的控制器可以控制控件的绘制、在控件被显示时进行初始化、处理视图上其他空间触发的事件。<br>  \n　　我的理解中，控制器和代理的不同大概在于，控制器完全就是用来控制控件的，而代理通常只是“兼任”。被控制器所控制的控件应该是控制器的<code>strong</code>属性。</p>\n\n<h3>Model-View-Controller（MVC）模型</h3>  \n\n<p>　　这是苹果提出的一个程序设计范例。即把内在逻辑与外部形象分开，并用控制器在两者间通信。</p>  \n\n<h3>事件处理</h3>  \n\n<p>　　Obj-C的事件分为两类：event和action。<br>  \n　　这一部分很复杂，我也没看太懂，只懂很简单的用法。请参见文档<a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/EventOverview/Introduction/Introduction.html#//apple_ref/doc/uid/10000060i-CH1-SW1\">Cocoa Event Handling Guide</a>。</p>\n\n<h4>Event</h4>  \n\n<p>　　Event是输入设备触发的，如按键或者鼠标点击。<br>  \n　　一个鼠标event会首先传递给被点击的对象，如果这一对象不对其做出响应，则传递给响应链（responder chain）上的下一个对象。一个键盘event则会首先传给first responder，大概可以理解为当前的焦点。<br>\n　　默认情况下，一个对象在响应链上的下一个对象是其父对象。如果一个对象要对event做出响应，则这一对象需要定义对应的方法。比如鼠标右击的方法是<code>- (void)rightMouseDown:(NSEvent *)event</code>。举个例子，假设用户右击了一个按钮，如果按钮没有定义右击方法，则事件传递给包含按钮的视图；再下去会传递给窗体，再下去会是窗体的控制器。<br>\n　　我个人感觉上事件处理这里通过定义方法来响应的处理方式，有点像遵从协议。</p>\n\n<h4>Action</h4>  \n\n<p>　　Action通常是程序内部传递的动作。类对象可以设置<code>target</code>和<code>action</code>。当它们被触发时，会调用对应的<code>target</code>的<code>action</code>方法。这里<code>action</code>是一个方法的选择器（seletor，其实就是函数指针），这个方法接受一个<code>id</code>类型（即任意类型的指针）的参数。<code>target</code>也可以为<code>nil</code>，这时action会在响应链上传递。<br>  \n　　Action的响应链有别于Event的响应链，而且十分复杂，我也不是很懂。请参见文档。<br>\n　　如果对一个<code>NSButton</code>设定target-action，则其会在mouse up的时机触发action。</p>\n\n<h3>Interface Builder（IB）</h3>  \n\n<p>　　创建界面的图形化工具。其实光靠这个是满足不了需求的，因为更多的时候我们会用到动态的界面，比如我们会改变文本框的文字，修改窗口大小，在菜单中增加删除项目等。<br>  \n　　关于IB两个最蛋疼的概念就是File's Owner和First Responder。关于First Responder可以参见上面提到的文档。File's Owner通常被设定为控件的控制器的类。</p>\n\n<h2>我的第一个（大）工程</h2>  \n\n<p>　　关于概念什么的我也没什么好扯的了，毕竟自己也不太懂。下面来讲讲我的第一个工程 Halt（中止）。图标是自己P的。<br><img src=\"http://user-image.logdown.io/user/6158/blog/6167/post/255897/KMdCt2JoSdCsowzEo0cH_QQ20150223-1.png\" alt=\"QQ20150223-1.png\"><br>  \n　　写这个程序的初衷是为了提醒我自己定时休息。Halt是一个常驻状态栏的程序，单击图标会弹出一个窗口（<code>NSPopover</code>），告诉你你还剩多少时间（= =），右击则可以弹出菜单。<br><img src=\"http://user-image.logdown.io/user/6158/blog/6167/post/255897/qYDc3hQdQi6EzY7pasJ6_%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-02-23%20%E4%B8%8B%E5%8D%889.50.31.png\" alt=\"屏幕快照 2015-02-23 下午9.50.31.png\"><br><img src=\"http://user-image.logdown.io/user/6158/blog/6167/post/255897/Tmu5igZJTCHE6IZuJEoY_%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-02-23%20%E4%B8%8B%E5%8D%889.50.18.png\" alt=\"屏幕快照 2015-02-23 下午9.50.18.png\"><br>\n　　Halt有四种状态：工作、推迟、休息和停止。工作状态的时间结束后会询问用户是否休息，不休息则进入推迟。推迟时间到后可以继续推迟，直到达到了推迟上线，这时就必须休息。休息时会有一个覆盖整个屏幕的半透明窗口一直处于最前面，使得用户无法操作。休息结束后可以停止，或者是再次回到工作状态。与用户的交互通过系统的通知消息（<code>NSUserNotification</code>，其实本来不应该是干这个的）完成。<br><img src=\"http://user-image.logdown.io/user/6158/blog/6167/post/255897/0bZGsYNjS8OqZsV2VcKh_%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-02-23%20%E4%B8%8B%E5%8D%889.54.49.png\" alt=\"屏幕快照 2015-02-23 下午9.54.49.png\"><br>\n　　代码被我放在了GitHub上：<a href=\"https://www.github.com/huzecong/halt-osx/\">链接</a>。</p>\n\n<h3>架构</h3>  \n\n<p>　　分文件具体介绍一下实现。</p>  \n\n<h4>MainMenu.xib与AppDelegate类</h4>  \n\n<p>　　<code>MainMenu</code>是程序最先载入的界面，<code>AppDelegate</code>是其代理，也是整个程序最核心的控制部分。<br>  \n　　<code>AppDelegate</code>中有<code>TimerPopoverDelegate</code>、<code>TimerInfo</code>的指针，前者是弹出窗口的代理，后者则是程序内在逻辑的处理（Model部分）。还有一个<code>NSStatusItem</code>，用于显示状态栏图标，其<code>view</code>属性被我设置成了<code>RHStatusItemView</code>，GitHub上一个开源的封装好了的类，可以支持左右键单击事件。左键单击通过target-action绑定了弹出窗口代理的方法，右键则直接弹出菜单。</p>\n\n<ul>  \n<li>关于菜单必须说一句，菜单项（<code>NSMenuItem</code>）如果没有设置对应的action，则会显示成不可使用的灰色。我是在IB中设计的菜单，然后直接链接到了<code>AppDelegate</code>中对应的<code>IBAction</code>，但似乎没有效果。最后只能在代码初始化的方法中手动给菜单项设置action。</li>  \n<li>但事实上，如果只在IB中设置，好像只有Debug生成的程序中的菜单不可用，Release生成似乎还是可用的。</li>  \n</ul>  \n\n<h4>TimerPopoverWindow.xib与TimerPopoverDelegate类</h4>  \n\n<p>　　<code>TimerPopoverWindow</code>中只有一个窗口，是用作弹出窗口的分离窗口的。弹出窗口如上面的截图中所示，就是系统自带的日历程序中，单击一个事件后弹出的那种。日历中的窗口是可以分离的，拖住窗口往旁边扯就能分离出一个小窗口。<br>  \n　　<code>TimerPopoverDelegate</code>是弹出窗口的代理，包含了<code>NSPopover</code>和<code>TimerPopoverViewController</code>的指针。前者就是弹出窗口，后者这是弹出窗口的视图控制器。由于<code>NSPopover</code>需要自己指定视图，故需要自己设计一个控制器。<br>\n　　代理在被要求显示弹出窗口时即时对其初始化，并在弹出窗口关闭后析构。代理定义了两个代理的方法：<code>detachableWindowForPopover:</code>和<code>- (BOOL)popoverShouldDetach:(NSPopover *)popover</code>。前者返回提供的分离窗口，后者则是返回一个布尔值，代表是否允许分离。这个方法在官方文档中没有写（因为<code>NSPopover</code>在Yosemite中作了大幅改动），是我在stackoverflow上查到的。</p>\n\n<ul>  \n<li>这部分代码基本上是参照官方提供的样例代码<a href=\"https://developer.apple.com/library/mac/samplecode/Popover/Introduction/Intro.html\">Popover</a>写的。这份代码中直接将<code>AppDelegate</code>作为弹出窗口的代理，与我的代码不同。这里我也遇到了一个问题，就是代理中的<code>TimerPopoverViewController</code>对象并不会自己初始化，而<code>Popover</code>代码中并没有对其初始化。这里卡了我很久，后来才想到在代理的初始化方法中进行如下的初始化：  \n<figure class=\"figure-code code\"><div class=\"highlight\">\n\n<pre>viewController = [[TimerPopoverViewController alloc] initWithNibName:@\"TimerPopoverView\" bundle:[NSBundle mainBundle]];\n</pre></div>  \n</figure>  \n</li>  \n</ul>  \n\n<h4>TimerPopoverView.xib与TimerPopoverViewController类</h4>  \n\n<p>　　即弹出窗口的视图，如截图所示。这里定义了一个用来刷新时间显示的<code>NSTimer</code>（定时器），同时也有一个<code>TimerInfo</code>的<code>weak</code>引用，用于获取具体的信息。为了支持多语言，我用了很多很裸的<code>NSLocalizedString</code>，弄得代码很丑……应该有更好的写法。</p>\n\n<ul>  \n<li>关于<code>NSTimer</code>的设置，似乎有两种初始化方法，一种直接设置target-action，另一种则用了<code>NSInvocation</code>……不是很清楚有什么区别，虽然代码里两种都用了= =</li>  \n</ul>  \n\n<h4>TimerInfo类与TimerLogic类</h4>  \n\n<p>　　<code>TimerLogic</code>类来自之前写的另一个倒计时小程序，对<code>NSTimer</code>进行了封装，支持开始暂停结束以及返回剩余时间。<code>TimerInfo</code>包含了一个<code>TimerLogic</code>的指针，还有一堆属性，包括各个模式时间长度、允许推迟的次数、已推迟的次数、当前模式，还有用于切换模式的一些成员方法。<br>  \n　　这里定时器到时间时的触发方法是<code>AppDelegate</code>中的方法。<br>\n　　<code>AppDelegate</code>还设置了对于其包含的<code>TimerInfo</code>对象的当前模式的observer，并在监测改变的方法对View部分进行修改，包括更改状态栏图标、修改右键菜单、打开阻止操作的窗口、发送通知。</p>\n\n<h3>遇到的大问题</h3>  \n\n<h4>关于打开用于阻挡操作的窗口</h4>  \n\n<p>　　开始我的想法是另外写一个控制器来控制这个窗口，后来发现把窗口调到最前面来，也不知道为什么= =<br>  \n　　后来直接在<code>AppDelegate</code>里声明了一个窗口，并在要弹出的时候即时初始化，在用窗口的<code>makeKeyAndOrderFront:</code>方法前置，再将用<code>[NSApp activateIgnoringOtherApps:YES]</code>赋予应用程序焦点。同时实现<code>applicationDidResignActive:</code>方法，在应用程序失去焦点的时候再强行赋予焦点之后把窗口提前。虽然不太优美，但能达到效果。<br>\n　　随之问题就来了：第二次点中止按钮会崩溃。查Crash Report看到是系统的自动释放池那里出了问题，心想卧槽这关我什么事啊……后来查到发现这是因为存在多余的<code>release</code>操作，导致产生了僵尸对象（这个说法还挺形象）。用Instruments可以检测Zombies，各种查，发现是第二次打开窗口的时候会崩溃。<br>\n　　最后我改成了，在应用程序初始化的时候就初始化窗口，但是不显示。打开窗口的时候只是前置，关闭时只是用窗口的<code>orderOut:</code>方法将其隐去。具体为什么会出现Zombie我也不是很清楚，不过stackoverflow上有这个<a href=\"http://stackoverflow.com/questions/13345378/why-does-this-simple-nswindow-creation-code-trigger-an-autorelease-pool-crash-on\">帖子</a>和这个<a href=\"http://stackoverflow.com/questions/8377747/zombie-event-in-cocoa\">帖子</a>，讲到了另外的用<code>NSWindow</code>时会出现Zombie的情况，还比较有意思。</p>\n\n<h4>关于通知消息与通知中心</h4>  \n\n<p>　　通知消息其实有两种，<code>NSNotification</code>和<code>NSUserNotification</code>，但他们有本质上的不同。前者是程序内传递的消息，后者才是截图中那种通知。<br>  \n　　说实话，通知中心这一块我感觉是整个程序里最复杂的部分，我查了许多资料才搞定。官方文档里有一份文档讲如何使用通知，但讲的很不详细，而且大部分是针对iOS开发的。<br>\n　　下面一个一个讲我遇到的问题：</p>\n\n<ol>  \n<li><p>第一个问题就是，通知只有文字，没有按钮（actionButton）。<br>  \n　　这是因为通知有两种形式：banner和alert，默认情况下都是banner，而banner是不带按钮的（在系统设置里也可以设置）。<br>\n　　要更改这个，需要在<code>Info.plist</code>中添加一项名为<code>NSUserNotificationAlertStyle</code>，值为<code>alert</code>。（不过这么说来，整个应用程序都只能有一种通知？）</p></li>\n<li><p>第二个问题是，当应用程序处于激活状态时，默认不会发出通知。<br>  \n　　<code>NSUserNotificationCenterDelegate</code>协议中有一个方法<code>userNotificationCenter:shouldPresentNotification:</code>，在发送通知前会调用，如果返回<code>YES</code>则一定发送。将<code>defaultUserNotificationCenter</code>的代理设为<code>AppDelegate</code>对象自身，再实现这个函数，一直返回<code>YES</code>即可。</p></li>\n<li>  \n<p>第三个问题是，我不知道用户到底采取了什么行动。<br>  \n　　虽然<code>NSUserNotification</code>有<code>activationType</code>属性，但我不知道用户什么时候才会响应通知，在响应之前<code>activationType</code>一直都会是<code>...None</code>。<br>\n　　在代理协议中还有另外两个方法<code>userNotificationCenter:didDeliverNotification:</code>和<code>userNotificationCenter:didActivateNotification:</code>，分别在通知被发出和被响应时调用。当用户点击消息内容，或者单击<code>actionButton</code>时，会调用后者方法，而且传入的<code>NSUserNotification</code>对象的<code>activationType</code>属性会设置为对应的响应方式。但是，如果用户点了关闭，则不会调用这一方法。<br>\n　　我在网上找到了一个有点像黑科技的解决方法= =在<code>didDeliverNotification</code>的方法中加入下面这一段：</p>\n\n<figure class=\"figure-code code\"><div class=\"highlight\">\n\n<pre>dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0),\n           ^{\n               BOOL notificationStillPresent;\n               do {\n                   notificationStillPresent = NO;\n                   for (NSUserNotification *nox in [[NSUserNotificationCenter defaultUserNotificationCenter] deliveredNotifications]) {\n                       if ([nox.identifier isEqualToString:notification.identifier]) notificationStillPresent = YES;\n                   }\n                   if (notificationStillPresent) [NSThread sleepForTimeInterval:0.20f];\n               } while (notificationStillPresent);\n               dispatch_async(dispatch_get_main_queue(), ^{\n                   [self handleNotification:notification];\n               });\n           });\n</pre></div>  \n</figure><p>　　<code>dispatch_async</code>会在另外的线程上调用这一block（其实就是lambda函数），它会不停在<code>deliveredNotifications</code>中寻找，看这一通知是否还存在。如果用户点了关闭，则这一通知会从<code>deliveredNotifications</code>中被删去，这时就会调用另一个自定义的方法来处理这一通知。<br>  \n　　这一方法虽然不够优美，但确实有效。</p>\n</li>  \n<li><p>第四个问题是，如果单击消息内容，则通知不会消失。<br>  \n　　Alert形式的通知似乎不会自动消失，必须要手动点关闭或者actionButton，但如果单击消息内容，通知是不会消失的。<br>\n　　其实也很好办，通知中心有成员方法<code>removeDeliveredNotification:</code>，只要在<code>didActivateNotification:</code>中调用就好。<br>\n　　但并没有这么简单……我试了这一方法，并没有效果。我还在网上查到了一个私有API<code>_removeDisplayedNotification:</code>，同样没有效果。<br>\n　　最后发现，是移除通知要求通知必须设定<code>identifier</code>，和问题3中的代码要求一样。因为事实上，代码中定义的通知、通知中心中存储的通知、传入给代理方法的通知都并不是同一个通知，虽然内容一样，但地址并不相同：可以想象在发送通知时通知中心会自己复制通知，这也合情合理。因此要识别通知，只能靠<code>identifier</code>。</p></li>\n<li><p>关于处理用户响应，还有一个问题。<br>  \n　　如果单击了<code>actionButton</code>，则消息会被处理两遍。经实验，<code>didActivateNotification:</code>会首先被调用，然后上面这段代码才会检测到通知被处理。我开始的想法是，不实现<code>didActivateNotification:</code>了，直接用这段代码处理，但又有两个问题：一是单击消息内容时，由于通知不会消失，也就不会被这段代码检测到；二是这段代码获取的通知，其<code>activationType</code>永远是<code>...None</code>，毕竟是在为<code>...None</code>的时候复制得到的。<br>\n　　所以我还是实现了<code>didActivateNotification:</code>，并在其中也调用了<code>[self handleNotification:notification]</code>方法。我在通知的<code>identifier</code>中加入了发出的时间，差不多可以认为是唯一的标示符，并在<code>handleNotification:</code>方法中记录下了上一次处理的通知<code>identifier</code>，以判断是否处理过。在方法的最后，我调用了<code>removeDeliveredNotification:</code>将其消除掉，以处理单击内容的情况。</p></li>\n<li><p><code>actionButton</code>只有一个，而我需要两个按钮。<br>  \n　　通知有一个<code>additionalActions</code>属性，是一个<code>NSArray</code>的对象，似乎是可以显示更多的按钮。但我这里一直没法显示，也不知道为什么。最后只好用<code>otherButtonTitle</code>改了关闭按钮的名字= =</p></li>\n</ol>  \n\n<p>　　关于通知还有不少黑科技，比如如何像iTunes那样把原本应该显示AppIcon的图像改成专辑封面，或者是像Reminder和App Store那样在按钮处显示一个下拉菜单。这些都有苹果自己的私有API可以实现，但如果要把应用程序提交打App Store上的话，就不能用这些API……</p>  \n\n<h2>后记</h2>  \n\n<p>　　一不留神就写了这么长。代码也是，加起来估计有差不多30kb了（主要是名字都太特么长了）。整个工程大概花了我4个(下午+晚上)（早上都睡过去了，吃完早饭就差不多11点了）。<br>  \n　　还有，我本以为写了这个程序我就能按时休息= =但事实是我会一直postpone，最后halt的时候会去玩手机……</p>\n\n<p></body> <br />\n</html></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1435811603859,"created_by":1,"updated_at":1435811953450,"updated_by":1,"published_at":1435811660156,"published_by":1},{"id":13,"uuid":"45e347d8-fee3-4eda-9337-064132bf0a09","title":"linux下Nginx+Django Admin界面无样式问题解决方法","slug":"linuxxia-nginxdjango-adminjie-mian-wu-yang-shi-wen-ti-jie-jue-fang-fa","markdown":"http://www.111cn.net/sys/linux/79751.htm\n\nlinux下Nginx+Django Admin界面无样式问题解决方法\n\n下面本文给各位介绍linux下Nginx+Django Admin界面无样式问题解决方法，如果你碰到此问题可以一起来看看吧．\n\nDjango增加admin后台管理：\n\n[root@hz Byrd]# python manage.py syncdb    #建表、设置管理员\n[root@hz Byrd]# cat Byrd/urls.py              \nurlpatterns = patterns('',\n    # Examples:\n    # url(r'^$', '{{ project_name }}.views.home', name='home'),\n    # url(r'^{{ project_name }}/', include('{{ project_name }}.foo.urls')),\n\n    # Uncomment the admin/doc line below to enable admin documentation:     # url(r'^admin/doc/', include('django.contrib.admindocs.urls')),\n\n    # Uncomment the next line to enable the admin:\n    url(r'^admin/', include(admin.site.urls)),    #将admin注释去掉\n)\n\n访问：http://mydomain/admin发现样式不正确，/static/admin/css/base.css这样的样式报404未找到错误！\n\n继续测试：python manage.py runserver 0.0.0.0:8080 发现不经过nginx，样式是被加载的。\n\n解决方法：\n\n        location /static/ {\n            alias /python目录/site-packages/django/contrib/admin/static/;\n }","html":"<p><a href=\"http://www.111cn.net/sys/linux/79751.htm\">http://www.111cn.net/sys/linux/79751.htm</a></p>\n\n<p>linux下Nginx+Django Admin界面无样式问题解决方法</p>\n\n<p>下面本文给各位介绍linux下Nginx+Django Admin界面无样式问题解决方法，如果你碰到此问题可以一起来看看吧．</p>\n\n<p>Django增加admin后台管理：</p>\n\n<p>[root@hz Byrd]# python manage.py syncdb    #建表、设置管理员\n[root@hz Byrd]# cat Byrd/urls.py <br />\nurlpatterns = patterns('', <br />\n    # Examples:\n    # url(r'^$', '{{ project<em>name }}.views.home', name='home'),\n    # url(r'^{{ project</em>name }}/', include('{{ project_name }}.foo.urls')),</p>\n\n<pre><code># Uncomment the admin/doc line below to enable admin documentation:     # url(r'^admin/doc/', include('django.contrib.admindocs.urls')),\n\n# Uncomment the next line to enable the admin:\nurl(r'^admin/', include(admin.site.urls)),    #将admin注释去掉\n</code></pre>\n\n<p>)</p>\n\n<p>访问：<a href=\"http://mydomain/admin发现样式不正确，/static/admin/css/base.css这样的样式报404未找到错误！\">http://mydomain/admin发现样式不正确，/static/admin/css/base.css这样的样式报404未找到错误！</a></p>\n\n<p>继续测试：python manage.py runserver 0.0.0.0:8080 发现不经过nginx，样式是被加载的。</p>\n\n<p>解决方法：</p>\n\n<pre><code>    location /static/ {\n        alias /python目录/site-packages/django/contrib/admin/static/;\n</code></pre>\n\n<p>}</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1437457491200,"created_by":1,"updated_at":1437457544062,"updated_by":1,"published_at":1437457544063,"published_by":1},{"id":14,"uuid":"806b4e04-ee3e-48b8-826c-0e7391ea5550","title":"如何在Linux中查看所有正在运行的进程","slug":"ru-he-zai-linuxzhong-cha-kan-suo-you-zheng-zai-yun-xing-de-jin-cheng","markdown":"如何在Linux中查看所有正在运行的进程\n\n进程是一个其中运行着一个或多个线程的地址空间和这些线程所需要的系统资源。在Linux系统中有很多命令。那么哪些命令可以查看所有运行中的进程呢？让我们听飞哥介绍一下。\n\n你可以使用ps命令。它能显示当前运行中进程的相关信息，包括进程的PID。Linux和UNIX都支持ps命令，显示所有运行中进程的相关信息。ps命令能提供一份当前进程的快照。如果你想状态可以自动刷新，可以使用top命令。\n\nps命令\n\n输入下面的ps命令，显示所有运行中的进程：\n\n# ps aux | less\n其中，\n\n-A：显示所有进程\n\na：显示终端中包括其它用户的所有进程\n\nx：显示无控制终端的进程\n\n任务：查看系统中的每个进程。\n\n# ps -A\n# ps -e\n任务：查看非root运行的进程\n\n# ps -U root -u root -N\n任务：查看用户vivek运行的进程\n\n# ps -u vivek\n任务：top命令\n\ntop命令提供了运行中系统的动态实时视图。在命令提示行中输入top：\n\n# top\n输出：\n\n图1：top命令：显示Linux任务\n图1：top命令：显示Linux任务\n\n按q退出，按h进入帮助。\n\n任务：显示进程的树状图。\n\npstree以树状显示正在运行的进程。树的根节点为pid或init。如果指定了用户名，进程树将以用户所拥有的进程作为根节点。\n\n$ pstree\n输出示例：\n\n图2：pstree - 显示进程的树状图\n图2：pstree - 显示进程的树状图\n\n任务：使用ps列印进程树\n\n# ps -ejH\n# ps axjf\n任务：获得线程信息\n\n输入下列命令：\n\n# ps -eLf\n# ps axms\n任务：获得安全信息\n\n输入下列命令：\n\n# ps -eo euser,ruser,suser,fuser,f,comm,label\n# ps axZ\n# ps -eM\n任务：将进程快照储存到文件中\n\n输入下列命令：\n\n# top -b -n1 > /tmp/process.log\n你也可以将结果通过邮件发给自己：\n\n# top -b -n1 | mail -s 'Process snapshot' you@example.com\n任务：查找进程\n\n使用pgrep命令。pgrep能查找当前正在运行的进程并列出符合条件的进程ID。例如显示firefox的进程ID：\n\n$ pgrep firefox\n下面命令将显示进程名为sshd、所有者为root的进程。\n\n$ pgrep -u root sshd\n向htop和atop说hello\n\nhtop是一个类似top的交互式进程查看工具，但是可以垂直和水平滚动来查看所有进程和他们的命令行。进程的相关操作(killing，renicing)不需要输入PID。要安装htop输入命令：\n\n# apt-get install htop\n或\n\n# yum install htop\n在命令提示行中输入htop：\n\n# htop\n输出示例：\n\n图3：htop - Interactive Linux / UNIX process viewer\n图3：htop - Interactive Linux / UNIX process viewer\n\natop工具\n\natop是一个用来查看Linux系统负载的交互式监控工具。它能展现系统层级的关键硬件资源(从性能角度)的使用情况，如CPU、内存、硬盘和网络。\n\n它也可以根据进程层级的CPU和内存负载显示哪个进程造成了特定的负载;如果已经安装内核补丁可以显示每个进程的硬盘和网络负载。输入下面的命令启动atop：\n\n# atop\n输出示例：\n\n图4：AT Computing's System   Process Monitor\n图4：AT Computing's System & Process Monitor\n\n原文链接：http://hi.baidu.com/imlidapeng/blog/item/4ef37d634b58b957eaf8f83d.html","html":"<p>如何在Linux中查看所有正在运行的进程</p>\n\n<p>进程是一个其中运行着一个或多个线程的地址空间和这些线程所需要的系统资源。在Linux系统中有很多命令。那么哪些命令可以查看所有运行中的进程呢？让我们听飞哥介绍一下。</p>\n\n<p>你可以使用ps命令。它能显示当前运行中进程的相关信息，包括进程的PID。Linux和UNIX都支持ps命令，显示所有运行中进程的相关信息。ps命令能提供一份当前进程的快照。如果你想状态可以自动刷新，可以使用top命令。</p>\n\n<p>ps命令</p>\n\n<p>输入下面的ps命令，显示所有运行中的进程：</p>\n\n<h1 id=\"psauxless\">ps aux | less</h1>\n\n<p>其中，</p>\n\n<p>-A：显示所有进程</p>\n\n<p>a：显示终端中包括其它用户的所有进程</p>\n\n<p>x：显示无控制终端的进程</p>\n\n<p>任务：查看系统中的每个进程。</p>\n\n<h1 id=\"psa\">ps -A</h1>\n\n<h1 id=\"pse\">ps -e</h1>\n\n<p>任务：查看非root运行的进程</p>\n\n<h1 id=\"psurooturootn\">ps -U root -u root -N</h1>\n\n<p>任务：查看用户vivek运行的进程</p>\n\n<h1 id=\"psuvivek\">ps -u vivek</h1>\n\n<p>任务：top命令</p>\n\n<p>top命令提供了运行中系统的动态实时视图。在命令提示行中输入top：</p>\n\n<h1 id=\"top\">top</h1>\n\n<p>输出：</p>\n\n<p>图1：top命令：显示Linux任务\n图1：top命令：显示Linux任务</p>\n\n<p>按q退出，按h进入帮助。</p>\n\n<p>任务：显示进程的树状图。</p>\n\n<p>pstree以树状显示正在运行的进程。树的根节点为pid或init。如果指定了用户名，进程树将以用户所拥有的进程作为根节点。</p>\n\n<p>$ pstree\n输出示例：</p>\n\n<p>图2：pstree - 显示进程的树状图\n图2：pstree - 显示进程的树状图</p>\n\n<p>任务：使用ps列印进程树</p>\n\n<h1 id=\"psejh\">ps -ejH</h1>\n\n<h1 id=\"psaxjf\">ps axjf</h1>\n\n<p>任务：获得线程信息</p>\n\n<p>输入下列命令：</p>\n\n<h1 id=\"pself\">ps -eLf</h1>\n\n<h1 id=\"psaxms\">ps axms</h1>\n\n<p>任务：获得安全信息</p>\n\n<p>输入下列命令：</p>\n\n<h1 id=\"pseoeuserrusersuserfuserfcommlabel\">ps -eo euser,ruser,suser,fuser,f,comm,label</h1>\n\n<h1 id=\"psaxz\">ps axZ</h1>\n\n<h1 id=\"psem\">ps -eM</h1>\n\n<p>任务：将进程快照储存到文件中</p>\n\n<p>输入下列命令：</p>\n\n<h1 id=\"topbn1tmpprocesslog\">top -b -n1 > /tmp/process.log</h1>\n\n<p>你也可以将结果通过邮件发给自己：</p>\n\n<h1 id=\"topbn1mailsprocesssnapshotyouexamplecom\">top -b -n1 | mail -s 'Process snapshot' you@example.com</h1>\n\n<p>任务：查找进程</p>\n\n<p>使用pgrep命令。pgrep能查找当前正在运行的进程并列出符合条件的进程ID。例如显示firefox的进程ID：</p>\n\n<p>$ pgrep firefox\n下面命令将显示进程名为sshd、所有者为root的进程。</p>\n\n<p>$ pgrep -u root sshd\n向htop和atop说hello</p>\n\n<p>htop是一个类似top的交互式进程查看工具，但是可以垂直和水平滚动来查看所有进程和他们的命令行。进程的相关操作(killing，renicing)不需要输入PID。要安装htop输入命令：</p>\n\n<h1 id=\"aptgetinstallhtop\">apt-get install htop</h1>\n\n<p>或</p>\n\n<h1 id=\"yuminstallhtop\">yum install htop</h1>\n\n<p>在命令提示行中输入htop：</p>\n\n<h1 id=\"htop\">htop</h1>\n\n<p>输出示例：</p>\n\n<p>图3：htop - Interactive Linux / UNIX process viewer\n图3：htop - Interactive Linux / UNIX process viewer</p>\n\n<p>atop工具</p>\n\n<p>atop是一个用来查看Linux系统负载的交互式监控工具。它能展现系统层级的关键硬件资源(从性能角度)的使用情况，如CPU、内存、硬盘和网络。</p>\n\n<p>它也可以根据进程层级的CPU和内存负载显示哪个进程造成了特定的负载;如果已经安装内核补丁可以显示每个进程的硬盘和网络负载。输入下面的命令启动atop：</p>\n\n<h1 id=\"atop\">atop</h1>\n\n<p>输出示例：</p>\n\n<p>图4：AT Computing's System   Process Monitor\n图4：AT Computing's System &amp; Process Monitor</p>\n\n<p>原文链接：<a href=\"http://hi.baidu.com/imlidapeng/blog/item/4ef37d634b58b957eaf8f83d.html\">http://hi.baidu.com/imlidapeng/blog/item/4ef37d634b58b957eaf8f83d.html</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1437460831805,"created_by":1,"updated_at":1437460856449,"updated_by":1,"published_at":1437460856451,"published_by":1},{"id":15,"uuid":"fabd8a83-cd3e-43d5-bf3d-ce0578fa0bde","title":"htop instal at centos","slug":"htop-instal-at-centos","markdown":"http://pkgs.repoforge.org/htop/\n\nwget http://apt.sw.be/redhat/el6/en/x86_64/rpmforge/RPMS/htop-1.0.3-1.el6.rf.x86_64.rpm\n\nrpm -Uvh htop-1.0.3-1.el6.rf.x86_64.rpm \n警告：htop-1.0.3-1.el6.rf.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 6b8d79e6: NOKEY\n准备中...                          ################################# [100%]\n\t软件包 htop-1.0.3-1.el6.rf.x86_64 已经安装","html":"<p><a href=\"http://pkgs.repoforge.org/htop/\">http://pkgs.repoforge.org/htop/</a></p>\n\n<p>wget <a href=\"http://apt.sw.be/redhat/el6/en/x86\">http://apt.sw.be/redhat/el6/en/x86</a><em>64/rpmforge/RPMS/htop-1.0.3-1.el6.rf.x86</em>64.rpm</p>\n\n<p>rpm -Uvh htop-1.0.3-1.el6.rf.x86<em>64.rpm <br />\n警告：htop-1.0.3-1.el6.rf.x86</em>64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 6b8d79e6: NOKEY\n准备中...                          ################################# [100%]\n    软件包 htop-1.0.3-1.el6.rf.x86_64 已经安装</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1437461516101,"created_by":1,"updated_at":1437461572672,"updated_by":1,"published_at":1437461572672,"published_by":1},{"id":16,"uuid":"4f5077d7-84aa-47aa-b1dd-9a27a3e75446","title":"Jenkins","slug":"jenkins","markdown":"1.Jenkins\n从 http://jenkins-ci.org/ 下载jenkins-1.622.pkg  或者下载我传到网盘的版本\n网盘地址： http://pan.baidu.com/s/1pJ9T5ajjenkins-1.622.pkg\n需要安装Java的，下载 然后安装 jdk\nhttp://pan.baidu.com/s/1pJKJo6n\n\n\n\n\n\n\n\n\n安装完成后，再确认下\n/Library/LaunchDaemons 目录下有没有 org.jenkins-ci.plist\n如果有的话 \nsudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist\n然后把org.jenkins-ci.plist 删掉\ncd /Library/LaunchDaemons\nsudo rm ./org.jenkins-ci.plist\n\n然后在终端 运行如下命令：\njava -Dfile.encoding=UTF-8 -Dhudson.DNSMultiCast.disabled=true -jar /Applications/Jenkins/jenkins.war --httpPort=8080\n这样就可以在浏览器打开\nhttp://localhost:8080/\n就能看到jenkins了\n如果8080 端口在用的话，就改个端口就行了\n\n2.shenzhen \nGithub地址：https://github.com/dacaiguoguo/shenzhen  可以打包ipa，可以发布ipa，到itunesconnect  ftp s3\n安装 \nsudo gem install shenzhen\ntips：Gem最好替换淘宝源\n查看当前有的源\ngem sources -l\n移除https://rubygems.org源\ngem sources --remove https://rubygems.org/\n增加http://ruby.taobao.org/源\ngem sources -a http://ruby.taobao.org/\n\n我们主要用\nipa distribute:sftp --host HOST -u USER -p PASSWORD -P FTP_PATH\n来发布\n\n--xcconfig DailyBuildRelease.xcconfig 说明\n.xcconfig 文件配置了编译变量 \n目的，只有在此命令编译时\n\n3.新浪sae\n创建应用 用svn管理代码\n添加html\n\n\nsvn提交代码到sae\n\n4.Jenkins 配置\n\n配置之前，从96上下载 dacaijenkins.zip  地址： http://192.168.0.96/debugapps/dacaijenkins.zip\n解压的全部文件拷贝到 ~/.jenkins 目录下 ，替换\n登录名dacai 密码lvmama\n创建项目\n\n点击配置\n\nsvn配置\n添加用户名，密码，配置url\n\n添加日程表\n\n5.Execute Shell 解释\n\n\n6.上传到96服务器问题 上传目录要求能用浏览器访问\n7. screen 使用\nscreen  -D -R jenkins\n然后再运行\njava -Dfile.encoding=UTF-8 -Dhudson.DNSMultiCast.disabled=true -jar /Applications/Jenkins/jenkins.war --httpPort=8080\n好处:不用一直开着终端\n","html":"<p>1.Jenkins <br />\n从 <a href=\"http://jenkins-ci.org/\">http://jenkins-ci.org/</a> 下载jenkins-1.622.pkg  或者下载我传到网盘的版本\n网盘地址： <a href=\"http://pan.baidu.com/s/1pJ9T5ajjenkins-1.622.pkg\">http://pan.baidu.com/s/1pJ9T5ajjenkins-1.622.pkg</a>\n需要安装Java的，下载 然后安装 jdk\n<a href=\"http://pan.baidu.com/s/1pJKJo6n\">http://pan.baidu.com/s/1pJKJo6n</a></p>\n\n<p>安装完成后，再确认下\n/Library/LaunchDaemons 目录下有没有 org.jenkins-ci.plist\n如果有的话 \nsudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist <br />\n然后把org.jenkins-ci.plist 删掉\ncd /Library/LaunchDaemons <br />\nsudo rm ./org.jenkins-ci.plist</p>\n\n<p>然后在终端 运行如下命令：\njava -Dfile.encoding=UTF-8 -Dhudson.DNSMultiCast.disabled=true -jar /Applications/Jenkins/jenkins.war --httpPort=8080 <br />\n这样就可以在浏览器打开\n<a href=\"http://localhost:8080/\">http://localhost:8080/</a> <br />\n就能看到jenkins了\n如果8080 端口在用的话，就改个端口就行了</p>\n\n<p>2.shenzhen <br />\nGithub地址：<a href=\"https://github.com/dacaiguoguo/shenzhen\">https://github.com/dacaiguoguo/shenzhen</a>  可以打包ipa，可以发布ipa，到itunesconnect  ftp s3 <br />\n安装 \nsudo gem install shenzhen <br />\ntips：Gem最好替换淘宝源 <br />\n查看当前有的源\ngem sources -l <br />\n移除<a href=\"https://rubygems.org源\">https://rubygems.org源</a>\ngem sources --remove <a href=\"https://rubygems.org/\">https://rubygems.org/</a> <br />\n增加<a href=\"http://ruby.taobao.org/源\">http://ruby.taobao.org/源</a>\ngem sources -a <a href=\"http://ruby.taobao.org/\">http://ruby.taobao.org/</a></p>\n\n<p>我们主要用\nipa distribute:sftp --host HOST -u USER -p PASSWORD -P FTP_PATH <br />\n来发布</p>\n\n<p>--xcconfig DailyBuildRelease.xcconfig 说明\n.xcconfig 文件配置了编译变量 \n目的，只有在此命令编译时</p>\n\n<p>3.新浪sae <br />\n创建应用 用svn管理代码\n添加html</p>\n\n<p>svn提交代码到sae</p>\n\n<p>4.Jenkins 配置</p>\n\n<p>配置之前，从96上下载 dacaijenkins.zip  地址： <a href=\"http://192.168.0.96/debugapps/dacaijenkins.zip\">http://192.168.0.96/debugapps/dacaijenkins.zip</a>\n解压的全部文件拷贝到 ~/.jenkins 目录下 ，替换\n登录名dacai 密码lvmama\n创建项目</p>\n\n<p>点击配置</p>\n\n<p>svn配置 <br />\n添加用户名，密码，配置url</p>\n\n<p>添加日程表</p>\n\n<p>5.Execute Shell 解释</p>\n\n<p>6.上传到96服务器问题 上传目录要求能用浏览器访问 <br />\n7. screen 使用 <br />\nscreen  -D -R jenkins <br />\n然后再运行\njava -Dfile.encoding=UTF-8 -Dhudson.DNSMultiCast.disabled=true -jar /Applications/Jenkins/jenkins.war --httpPort=8080 <br />\n好处:不用一直开着终端</p>","image":"/content/images/2015/08/2.png","featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1438933675032,"created_by":1,"updated_at":1461227575195,"updated_by":1,"published_at":null,"published_by":null},{"id":17,"uuid":"1576439b-c805-48f1-9929-b3c644fda354","title":"由统一autolayout 第三方库引起的一点想法","slug":"you-tong-autolayout-di-san-fang-ku-yin-qi-de-dian-xiang-fa","markdown":"下次分享再说下自动部署\n\n关于里的debug\n\n编程思想最重要\n\n我们每一个第三方库如果大家都会用到\n\n不仅仅加入工程那么简单\n\n我们也不应该只是大概看看知道怎么用\n\n优秀的第三方库里包含了很多人的智慧想法 编程思想而且不断的在更新\n\n我们在实现业务需求的同时，应该对自己精益求精\n\n不要丑而快\n\n我们要做培训 讨论 分享\n\n让我们每一个开发都熟悉通用第三方库的用法 写法用法统一\n\n由统一autolayout 第三方库引起的一点想法\n\n不仅第三方库，我们自己封装的控件 工具类 也应如此\n\n不仅加入工程、更要加入我们的大脑\n\n还有\n\n新同事的问题、来了新同事怎么办 怎么把新同事的对工程的认识统一\n\n还有 工程中的严重耦合\n\n比如游玩人列表\n\n如非必要不要引用其他controller 页面跳转应该由中间工具类的类方法实现\n\n为避免工具类耦合 可使用类别分散类方法","html":"<p>下次分享再说下自动部署</p>\n\n<p>关于里的debug</p>\n\n<p>编程思想最重要</p>\n\n<p>我们每一个第三方库如果大家都会用到</p>\n\n<p>不仅仅加入工程那么简单</p>\n\n<p>我们也不应该只是大概看看知道怎么用</p>\n\n<p>优秀的第三方库里包含了很多人的智慧想法 编程思想而且不断的在更新</p>\n\n<p>我们在实现业务需求的同时，应该对自己精益求精</p>\n\n<p>不要丑而快</p>\n\n<p>我们要做培训 讨论 分享</p>\n\n<p>让我们每一个开发都熟悉通用第三方库的用法 写法用法统一</p>\n\n<p>由统一autolayout 第三方库引起的一点想法</p>\n\n<p>不仅第三方库，我们自己封装的控件 工具类 也应如此</p>\n\n<p>不仅加入工程、更要加入我们的大脑</p>\n\n<p>还有</p>\n\n<p>新同事的问题、来了新同事怎么办 怎么把新同事的对工程的认识统一</p>\n\n<p>还有 工程中的严重耦合</p>\n\n<p>比如游玩人列表</p>\n\n<p>如非必要不要引用其他controller 页面跳转应该由中间工具类的类方法实现</p>\n\n<p>为避免工具类耦合 可使用类别分散类方法</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1456797959254,"created_by":1,"updated_at":1456797991933,"updated_by":1,"published_at":1456797991934,"published_by":1},{"id":18,"uuid":"4f3d659d-db7f-45fd-b7ef-107749ee3cf3","title":"由一个闪退问题引起的追问","slug":"you-ge-shan-tui-wen-ti-yin-qi-de-zhui-wen","markdown":"好久没有查Crash问题了，有点生疏，日志摘要如下：\n```\nException Type:  EXC_RESOURCE\nException Subtype: WAKEUPS\nException Message: (Limit 150/sec) Observed 322/sec over 300 secs\nTriggered by Thread:  0\n```\n`EXC_RESOURCE`类型不常见，一开始也没怎么在意，想着用dsym翻译Crash日志。结果没查出什么有用的信息。symbolicatecrash 也报错\n```\nfind /Applications/Xcode.app -name symbolicatecrash -type f\n```\n等到晚上有空的时候我查了下 \n```\nYour app is sending a wakeup command to a particular thread in the app quite often - apparently an average of 206 times a second. Background threads in iOS 8 have a hard limit on how many times you can run a sleep/wake cycle on each thread per second, and having a high count here is usually an indication that something is wrong / inefficient in your thread management.\n```\n\n原来是某个线程发的wakeup命令的次数太过了，多线程这块理解不深正好借此机会深入学习一下，按网上说的从GCD开始\n\n\n\nhttps://www.raywenderlich.com/60749/grand-central-dispatch-in-depth-part-1\n\n\n\n","html":"<p>好久没有查Crash问题了，有点生疏，日志摘要如下：</p>\n\n<pre><code>Exception Type:  EXC_RESOURCE  \nException Subtype: WAKEUPS  \nException Message: (Limit 150/sec) Observed 322/sec over 300 secs  \nTriggered by Thread:  0  \n</code></pre>\n\n<p><code>EXC_RESOURCE</code>类型不常见，一开始也没怎么在意，想着用dsym翻译Crash日志。结果没查出什么有用的信息。symbolicatecrash 也报错</p>\n\n<pre><code>find /Applications/Xcode.app -name symbolicatecrash -type f  \n</code></pre>\n\n<p>等到晚上有空的时候我查了下 </p>\n\n<pre><code>Your app is sending a wakeup command to a particular thread in the app quite often - apparently an average of 206 times a second. Background threads in iOS 8 have a hard limit on how many times you can run a sleep/wake cycle on each thread per second, and having a high count here is usually an indication that something is wrong / inefficient in your thread management.  \n</code></pre>\n\n<p>原来是某个线程发的wakeup命令的次数太过了，多线程这块理解不深正好借此机会深入学习一下，按网上说的从GCD开始</p>\n\n<p><a href=\"https://www.raywenderlich.com/60749/grand-central-dispatch-in-depth-part-1\">https://www.raywenderlich.com/60749/grand-central-dispatch-in-depth-part-1</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1458314966478,"created_by":1,"updated_at":1458398086252,"updated_by":1,"published_at":1458397103856,"published_by":1},{"id":19,"uuid":"3ad461aa-7047-4f6e-a704-5dc100090e03","title":"lldb Crash","slug":"lldb","markdown":"两句命令让lldb crash， 见图\n![](http://ww3.sinaimg.cn/large/7271fd11jw1f22k0so46rj20o803mta9.jpg)","html":"<p>两句命令让lldb crash， 见图\n<img src=\"http://ww3.sinaimg.cn/large/7271fd11jw1f22k0so46rj20o803mta9.jpg\" alt=\"\" /></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1458398641306,"created_by":1,"updated_at":1458398926727,"updated_by":1,"published_at":1458398926728,"published_by":1},{"id":20,"uuid":"78909815-2547-432d-922b-f301e9020d23","title":"cocoapods安装相关步骤","slug":"kai-fa-xiang-guan-huan-jing-pei-zhi","markdown":"主要是安装cocoapods相关。非必要操作，只是我的建议。\n##1.配置zsh & 安装oh my zsh\n\n使用 zsh：chsh -s /bin/zsh，根据提示输入当前用户的密码就可以了。\n也可以系统偏好设置里修改登录shell来修改\n![change shell](http://ww3.sinaimg.cn/mw690/7271fd11jw1f3zeag4ca7j209206m0t1.jpg)\n\n安装「oh my zsh」可以自动安装也可以手动安装。\n自动安装：\n```\nwget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh\n```\n手动安装：\n```\ngit clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh\ncp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\n```\n\n##2.ruby 环境\n1.`mkdir -p $HOME/Software/ruby`\n2.`vi ~/.zshrc` 在最后添加\n```\nexport GEM_HOME=$HOME/Software/ruby\nexport PATH=$PATH:$HOME/Software/ruby/bin\n```\n3.重启终端\n##3.修改gem源&更新\n```\ngem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/\n```\n查看修改结果\n```\ngem sources -l\n```\n终端显示如下就对了\n```\n*** CURRENT SOURCES ***\n\nhttps://ruby.taobao.org\n```\n更新gem,要等一会儿\n```\nsudo gem update\n```\n##4.安装cocoapods 现在是1.0.0版本,cocoapods 官网 https://cocoapods.org\n```\ngem install cocoapods\n```\n安装完成后查看版本\n```\npod --version\n```\n","html":"<p>主要是安装cocoapods相关。非必要操作，只是我的建议。</p>\n\n<h2 id=\"1zshohmyzsh\">1.配置zsh &amp; 安装oh my zsh</h2>\n\n<p>使用 zsh：chsh -s /bin/zsh，根据提示输入当前用户的密码就可以了。\n也可以系统偏好设置里修改登录shell来修改\n<img src=\"http://ww3.sinaimg.cn/mw690/7271fd11jw1f3zeag4ca7j209206m0t1.jpg\" alt=\"change shell\" /></p>\n\n<p>安装「oh my zsh」可以自动安装也可以手动安装。\n自动安装：</p>\n\n<pre><code>wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh  \n</code></pre>\n\n<p>手动安装：</p>\n\n<pre><code>git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh  \ncp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc  \n</code></pre>\n\n<h2 id=\"2ruby\">2.ruby 环境</h2>\n\n<p>1.<code>mkdir -p $HOME/Software/ruby</code> <br />\n2.<code>vi ~/.zshrc</code> 在最后添加  </p>\n\n<pre><code>export GEM_HOME=$HOME/Software/ruby  \nexport PATH=$PATH:$HOME/Software/ruby/bin  \n</code></pre>\n\n<p>3.重启终端  </p>\n\n<h2 id=\"3gem\">3.修改gem源&amp;更新</h2>\n\n<pre><code>gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/  \n</code></pre>\n\n<p>查看修改结果</p>\n\n<pre><code>gem sources -l  \n</code></pre>\n\n<p>终端显示如下就对了</p>\n\n<pre><code>*** CURRENT SOURCES ***\n\nhttps://ruby.taobao.org  \n</code></pre>\n\n<p>更新gem,要等一会儿</p>\n\n<pre><code>sudo gem update  \n</code></pre>\n\n<h2 id=\"4cocoapods100cocoapodshttpscocoapodsorg\">4.安装cocoapods 现在是1.0.0版本,cocoapods 官网 <a href=\"https://cocoapods.org\">https://cocoapods.org</a></h2>\n\n<pre><code>gem install cocoapods  \n</code></pre>\n\n<p>安装完成后查看版本</p>\n\n<pre><code>pod --version  \n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1463545324118,"created_by":1,"updated_at":1463555758699,"updated_by":1,"published_at":1463545345220,"published_by":1},{"id":21,"uuid":"7860ed65-0267-4e6d-b11e-37658faabad8","title":"iOS笔记","slug":"iosbi-ji","markdown":"####1.jpg \n可以用 并且支持自动`@2x @3x`\n####2.`~iphone.nib` \n是因为xib里勾选了size class\nsize class 勾了也没影响，只是现在通用版本多一份`~ipad.nib` 会影响包大小\n####3.`options:NSJSONWritingPrettyPrinted \njson` 格式化\n会影响js方法调用 比如\n\n```    NSString *jsString = [NSString stringWithFormat:@\"%@('%@');\", @\"Onsuccess\", responseJson];\n```\n写0 就行了\n\n\nWebViewJavascriptBridge 已经处理好了\n\n```\n    messageJSON = [messageJSON stringByReplacingOccurrencesOfString:@\"\\\\\" withString:@\"\\\\\\\\\"];\n    messageJSON = [messageJSON stringByReplacingOccurrencesOfString:@\"\\\"\" withString:@\"\\\\\\\"\"];\n    messageJSON = [messageJSON stringByReplacingOccurrencesOfString:@\"\\'\" withString:@\"\\\\\\'\"];\n    messageJSON = [messageJSON stringByReplacingOccurrencesOfString:@\"\\n\" withString:@\"\\\\n\"];\n    messageJSON = [messageJSON stringByReplacingOccurrencesOfString:@\"\\r\" withString:@\"\\\\r\"];\n    messageJSON = [messageJSON stringByReplacingOccurrencesOfString:@\"\\f\" withString:@\"\\\\f\"];\n    messageJSON = [messageJSON stringByReplacingOccurrencesOfString:@\"\\u2028\" withString:@\"\\\\u2028\"];\n    messageJSON = [messageJSON stringByReplacingOccurrencesOfString:@\"\\u2029\" withString:@\"\\\\u2029\"];\n```","html":"<h4 id=\"1jpg\">1.jpg</h4>\n\n<p>可以用 并且支持自动<code>@2x @3x</code></p>\n\n<h4 id=\"2tiphonenib\">2.<code>~iphone.nib</code></h4>\n\n<p>是因为xib里勾选了size class\nsize class 勾了也没影响，只是现在通用版本多一份<code>~ipad.nib</code> 会影响包大小  </p>\n\n<h4 id=\"3optionsnsjsonwritingprettyprinted\">3.`options:NSJSONWritingPrettyPrinted</h4>\n\n<p>json` 格式化 <br />\n会影响js方法调用 比如</p>\n\n<pre><code class=\"language-    NSString *jsString = [NSString stringWithFormat:@\"%@('%@');\", @\"Onsuccess\", responseJson];\">```\n写0 就行了\n\n\nWebViewJavascriptBridge 已经处理好了\n</code></pre>\n\n<pre><code>messageJSON = [messageJSON stringByReplacingOccurrencesOfString:@\"\\\\\" withString:@\"\\\\\\\\\"];\nmessageJSON = [messageJSON stringByReplacingOccurrencesOfString:@\"\\\"\" withString:@\"\\\\\\\"\"];\nmessageJSON = [messageJSON stringByReplacingOccurrencesOfString:@\"\\'\" withString:@\"\\\\\\'\"];\nmessageJSON = [messageJSON stringByReplacingOccurrencesOfString:@\"\\n\" withString:@\"\\\\n\"];\nmessageJSON = [messageJSON stringByReplacingOccurrencesOfString:@\"\\r\" withString:@\"\\\\r\"];\nmessageJSON = [messageJSON stringByReplacingOccurrencesOfString:@\"\\f\" withString:@\"\\\\f\"];\nmessageJSON = [messageJSON stringByReplacingOccurrencesOfString:@\"\\u2028\" withString:@\"\\\\u2028\"];\nmessageJSON = [messageJSON stringByReplacingOccurrencesOfString:@\"\\u2029\" withString:@\"\\\\u2029\"];\n</code></pre>\n\n<p>```</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1465207511655,"created_by":1,"updated_at":1465210379576,"updated_by":1,"published_at":1465207604951,"published_by":1}],"users":[{"id":1,"uuid":"a49298ba-c4ec-4e82-a7e6-64584e6a4248","name":"dacaiguoguo","slug":"dacaiguoguo","password":"$2a$10$7H9vEihQtAzD7CrjCmm7VOv4laJnjbLCRWcgUmJlU532GoXCVBk5m","email":"dacaiguoguo@163.com","image":"/content/images/2015/06/Actions.jpg","cover":null,"bio":null,"website":null,"location":null,"accessibility":null,"status":"active","language":"en_US","meta_title":null,"meta_description":null,"last_login":1472561529048,"created_at":1434701396445,"created_by":1,"updated_at":1472561529048,"updated_by":1}],"roles":[{"id":1,"uuid":"7a2e6973-f720-4845-a1f3-3b3ca18fc642","name":"Administrator","description":"Administrators","created_at":1434701394191,"created_by":1,"updated_at":1434701394191,"updated_by":1},{"id":2,"uuid":"5d1ead19-10f1-40bc-a5b8-fa4fb425769e","name":"Editor","description":"Editors","created_at":1434701394193,"created_by":1,"updated_at":1434701394193,"updated_by":1},{"id":3,"uuid":"209fa413-b3c5-480d-8944-eb702855e1d1","name":"Author","description":"Authors","created_at":1434701394193,"created_by":1,"updated_at":1434701394193,"updated_by":1},{"id":4,"uuid":"0778c264-e89a-4767-b7b0-05c7b19cef99","name":"Owner","description":"Blog Owner","created_at":1434701394194,"created_by":1,"updated_at":1434701394194,"updated_by":1}],"roles_users":[{"id":1,"role_id":4,"user_id":1}],"permissions":[{"id":1,"uuid":"50ee9f39-b74a-4c24-be1b-4b35d450f179","name":"Export database","object_type":"db","action_type":"exportContent","object_id":null,"created_at":1434701394374,"created_by":1,"updated_at":1434701394374,"updated_by":1},{"id":2,"uuid":"76b66a4b-fea3-4cdb-8126-6ad0b6fad528","name":"Import database","object_type":"db","action_type":"importContent","object_id":null,"created_at":1434701394389,"created_by":1,"updated_at":1434701394389,"updated_by":1},{"id":3,"uuid":"64b68701-719c-4bc9-bce1-9490dcf92d8c","name":"Delete all content","object_type":"db","action_type":"deleteAllContent","object_id":null,"created_at":1434701394403,"created_by":1,"updated_at":1434701394403,"updated_by":1},{"id":4,"uuid":"fbcd6158-cb54-415c-a63f-bb266a76535c","name":"Send mail","object_type":"mail","action_type":"send","object_id":null,"created_at":1434701394417,"created_by":1,"updated_at":1434701394417,"updated_by":1},{"id":5,"uuid":"6801584e-5a72-4e2c-a9cf-11382dbb7837","name":"Browse notifications","object_type":"notification","action_type":"browse","object_id":null,"created_at":1434701394432,"created_by":1,"updated_at":1434701394432,"updated_by":1},{"id":6,"uuid":"6e1ee102-cee8-407b-83d1-d5beff4f6af2","name":"Add notifications","object_type":"notification","action_type":"add","object_id":null,"created_at":1434701394448,"created_by":1,"updated_at":1434701394448,"updated_by":1},{"id":7,"uuid":"ea75dc97-4ff2-42e6-91b0-10171a323814","name":"Delete notifications","object_type":"notification","action_type":"destroy","object_id":null,"created_at":1434701394463,"created_by":1,"updated_at":1434701394463,"updated_by":1},{"id":8,"uuid":"334898cc-6271-4af9-a1d2-6466641bc381","name":"Browse posts","object_type":"post","action_type":"browse","object_id":null,"created_at":1434701394481,"created_by":1,"updated_at":1434701394481,"updated_by":1},{"id":9,"uuid":"8c721095-2eb7-43ca-9626-cda2c1f69737","name":"Read posts","object_type":"post","action_type":"read","object_id":null,"created_at":1434701394496,"created_by":1,"updated_at":1434701394496,"updated_by":1},{"id":10,"uuid":"edda9b1e-325e-4d81-8c75-8607038e142e","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":1434701394512,"created_by":1,"updated_at":1434701394512,"updated_by":1},{"id":11,"uuid":"ae31892d-7a90-434c-903e-d7680f065b12","name":"Add posts","object_type":"post","action_type":"add","object_id":null,"created_at":1434701394526,"created_by":1,"updated_at":1434701394526,"updated_by":1},{"id":12,"uuid":"787bcfd1-d72f-4c33-891d-ebfefc3fcb06","name":"Delete posts","object_type":"post","action_type":"destroy","object_id":null,"created_at":1434701394539,"created_by":1,"updated_at":1434701394539,"updated_by":1},{"id":13,"uuid":"0c7b75f1-041c-4b32-8d03-ec193dc49742","name":"Browse settings","object_type":"setting","action_type":"browse","object_id":null,"created_at":1434701394552,"created_by":1,"updated_at":1434701394552,"updated_by":1},{"id":14,"uuid":"d832d742-fc9c-41b5-8ac0-71428ed82f88","name":"Read settings","object_type":"setting","action_type":"read","object_id":null,"created_at":1434701394582,"created_by":1,"updated_at":1434701394582,"updated_by":1},{"id":15,"uuid":"43321ddc-a387-4790-aa36-c46de359aa5e","name":"Edit settings","object_type":"setting","action_type":"edit","object_id":null,"created_at":1434701394595,"created_by":1,"updated_at":1434701394595,"updated_by":1},{"id":16,"uuid":"e7102dd1-73d1-44d0-82ce-3dd2f9d40038","name":"Generate slugs","object_type":"slug","action_type":"generate","object_id":null,"created_at":1434701394609,"created_by":1,"updated_at":1434701394609,"updated_by":1},{"id":17,"uuid":"0872a58a-36f5-4228-ad7b-49f64854de05","name":"Browse tags","object_type":"tag","action_type":"browse","object_id":null,"created_at":1434701394622,"created_by":1,"updated_at":1434701394622,"updated_by":1},{"id":18,"uuid":"4c5769c8-d1a1-43f7-9204-feed759ef8e2","name":"Read tags","object_type":"tag","action_type":"read","object_id":null,"created_at":1434701394635,"created_by":1,"updated_at":1434701394635,"updated_by":1},{"id":19,"uuid":"97fc0a86-5263-4178-903e-16ef3c9788dd","name":"Edit tags","object_type":"tag","action_type":"edit","object_id":null,"created_at":1434701394653,"created_by":1,"updated_at":1434701394653,"updated_by":1},{"id":20,"uuid":"3ff35f31-0c66-4cce-a3e4-fddcec3b2b19","name":"Add tags","object_type":"tag","action_type":"add","object_id":null,"created_at":1434701394668,"created_by":1,"updated_at":1434701394668,"updated_by":1},{"id":21,"uuid":"2e68efcb-dfc4-426a-b0f2-0cf7e47a185f","name":"Delete tags","object_type":"tag","action_type":"destroy","object_id":null,"created_at":1434701394682,"created_by":1,"updated_at":1434701394682,"updated_by":1},{"id":22,"uuid":"12288802-9ab0-4592-b9ed-a9358bc671aa","name":"Browse themes","object_type":"theme","action_type":"browse","object_id":null,"created_at":1434701394696,"created_by":1,"updated_at":1434701394696,"updated_by":1},{"id":23,"uuid":"40a56533-4037-4eab-833e-92cfda60689a","name":"Edit themes","object_type":"theme","action_type":"edit","object_id":null,"created_at":1434701394710,"created_by":1,"updated_at":1434701394710,"updated_by":1},{"id":24,"uuid":"89fcc3f5-edbe-498d-8f89-b4655b878b5c","name":"Browse users","object_type":"user","action_type":"browse","object_id":null,"created_at":1434701394723,"created_by":1,"updated_at":1434701394723,"updated_by":1},{"id":25,"uuid":"b7f95656-830c-4d58-989e-bff1b6bf276e","name":"Read users","object_type":"user","action_type":"read","object_id":null,"created_at":1434701394739,"created_by":1,"updated_at":1434701394739,"updated_by":1},{"id":26,"uuid":"e852bede-3289-4ab2-bb5c-3553bd878a67","name":"Edit users","object_type":"user","action_type":"edit","object_id":null,"created_at":1434701394753,"created_by":1,"updated_at":1434701394753,"updated_by":1},{"id":27,"uuid":"ca9445ff-6cb3-41aa-a007-471b56513e60","name":"Add users","object_type":"user","action_type":"add","object_id":null,"created_at":1434701394766,"created_by":1,"updated_at":1434701394766,"updated_by":1},{"id":28,"uuid":"7f480906-2da2-4f30-b421-24012a78a6d7","name":"Delete users","object_type":"user","action_type":"destroy","object_id":null,"created_at":1434701394779,"created_by":1,"updated_at":1434701394779,"updated_by":1},{"id":29,"uuid":"33e000a7-ce8c-451b-82d6-e596ff04f7ef","name":"Assign a role","object_type":"role","action_type":"assign","object_id":null,"created_at":1434701394795,"created_by":1,"updated_at":1434701394795,"updated_by":1},{"id":30,"uuid":"bcb5e948-22d5-408f-9c4d-2ccfc26a5169","name":"Browse roles","object_type":"role","action_type":"browse","object_id":null,"created_at":1434701394809,"created_by":1,"updated_at":1434701394809,"updated_by":1}],"permissions_users":[],"permissions_roles":[{"id":1,"role_id":1,"permission_id":1},{"id":2,"role_id":1,"permission_id":2},{"id":3,"role_id":1,"permission_id":3},{"id":4,"role_id":1,"permission_id":4},{"id":5,"role_id":1,"permission_id":5},{"id":6,"role_id":1,"permission_id":6},{"id":7,"role_id":1,"permission_id":7},{"id":8,"role_id":1,"permission_id":8},{"id":9,"role_id":1,"permission_id":9},{"id":10,"role_id":1,"permission_id":10},{"id":11,"role_id":1,"permission_id":11},{"id":12,"role_id":1,"permission_id":12},{"id":13,"role_id":1,"permission_id":13},{"id":14,"role_id":1,"permission_id":14},{"id":15,"role_id":1,"permission_id":15},{"id":16,"role_id":1,"permission_id":16},{"id":17,"role_id":1,"permission_id":17},{"id":18,"role_id":1,"permission_id":18},{"id":19,"role_id":1,"permission_id":19},{"id":20,"role_id":1,"permission_id":20},{"id":21,"role_id":1,"permission_id":21},{"id":22,"role_id":1,"permission_id":22},{"id":23,"role_id":1,"permission_id":23},{"id":24,"role_id":1,"permission_id":24},{"id":25,"role_id":1,"permission_id":25},{"id":26,"role_id":1,"permission_id":26},{"id":27,"role_id":1,"permission_id":27},{"id":28,"role_id":1,"permission_id":28},{"id":29,"role_id":1,"permission_id":29},{"id":30,"role_id":1,"permission_id":30},{"id":31,"role_id":2,"permission_id":8},{"id":32,"role_id":2,"permission_id":9},{"id":33,"role_id":2,"permission_id":10},{"id":34,"role_id":2,"permission_id":11},{"id":35,"role_id":2,"permission_id":12},{"id":36,"role_id":2,"permission_id":13},{"id":37,"role_id":2,"permission_id":14},{"id":38,"role_id":2,"permission_id":16},{"id":39,"role_id":2,"permission_id":17},{"id":40,"role_id":2,"permission_id":18},{"id":41,"role_id":2,"permission_id":19},{"id":42,"role_id":2,"permission_id":20},{"id":43,"role_id":2,"permission_id":21},{"id":44,"role_id":2,"permission_id":24},{"id":45,"role_id":2,"permission_id":25},{"id":46,"role_id":2,"permission_id":26},{"id":47,"role_id":2,"permission_id":27},{"id":48,"role_id":2,"permission_id":28},{"id":49,"role_id":2,"permission_id":29},{"id":50,"role_id":2,"permission_id":30},{"id":51,"role_id":3,"permission_id":8},{"id":52,"role_id":3,"permission_id":9},{"id":53,"role_id":3,"permission_id":11},{"id":54,"role_id":3,"permission_id":13},{"id":55,"role_id":3,"permission_id":14},{"id":56,"role_id":3,"permission_id":16},{"id":57,"role_id":3,"permission_id":17},{"id":58,"role_id":3,"permission_id":18},{"id":59,"role_id":3,"permission_id":20},{"id":60,"role_id":3,"permission_id":24},{"id":61,"role_id":3,"permission_id":25},{"id":62,"role_id":3,"permission_id":30}],"permissions_apps":[],"settings":[{"id":1,"uuid":"0af4f763-2b58-45dc-8da3-843e375837c5","key":"databaseVersion","value":"003","type":"core","created_at":1434701396489,"created_by":1,"updated_at":1434701396489,"updated_by":1},{"id":2,"uuid":"ad3a86bd-b812-4293-abf2-7e9f01afe38c","key":"dbHash","value":"595b6430-ae90-4db4-9a33-cc97131fa35f","type":"core","created_at":1434701396508,"created_by":1,"updated_at":1434701396857,"updated_by":1},{"id":3,"uuid":"fef343aa-ccb1-4142-800a-c3af31da96c3","key":"nextUpdateCheck","value":"1472647844","type":"core","created_at":1434701396508,"created_by":1,"updated_at":1472561444546,"updated_by":1},{"id":4,"uuid":"f11b2803-ee80-40f1-bbb5-9823480cd78e","key":"displayUpdateNotification","value":"0.10.0","type":"core","created_at":1434701396508,"created_by":1,"updated_at":1472561444552,"updated_by":1},{"id":5,"uuid":"b3279250-8d87-433a-baff-e8b126f72063","key":"title","value":"Dacaiguoguo","type":"blog","created_at":1434701396509,"created_by":1,"updated_at":1461227832196,"updated_by":1},{"id":6,"uuid":"756a709c-1919-4ce0-8e57-99775b456e53","key":"description","value":"Thoughts, stories and ideas.","type":"blog","created_at":1434701396510,"created_by":1,"updated_at":1461227832197,"updated_by":1},{"id":7,"uuid":"78ef1c83-8ca7-422c-b393-e69d54ca0cf5","key":"email","value":"dacaiguoguo@163.com","type":"blog","created_at":1434701396510,"created_by":1,"updated_at":1461227832197,"updated_by":1},{"id":8,"uuid":"632b4bd5-6e41-43f3-8cd6-8a767a1ade6f","key":"logo","value":"/content/images/2015/06/Actions-1.jpg","type":"blog","created_at":1434701396510,"created_by":1,"updated_at":1461227832198,"updated_by":1},{"id":9,"uuid":"34350a00-928d-4f24-9a97-019352214ca8","key":"cover","value":"","type":"blog","created_at":1434701396510,"created_by":1,"updated_at":1461227832199,"updated_by":1},{"id":10,"uuid":"aa571c5e-85e7-443e-b53f-74d9089345fa","key":"defaultLang","value":"en_US","type":"blog","created_at":1434701396510,"created_by":1,"updated_at":1461227832200,"updated_by":1},{"id":11,"uuid":"0ad62bd3-d634-4552-a9a0-7c2adff83405","key":"postsPerPage","value":"5","type":"blog","created_at":1434701396511,"created_by":1,"updated_at":1461227832201,"updated_by":1},{"id":12,"uuid":"d9b9a3f3-4a72-4d91-9645-f3bb7e7651fd","key":"forceI18n","value":"true","type":"blog","created_at":1434701396511,"created_by":1,"updated_at":1461227832201,"updated_by":1},{"id":13,"uuid":"dba80a7c-aaf4-49ae-94fd-43e738572aa6","key":"permalinks","value":"/:slug/","type":"blog","created_at":1434701396511,"created_by":1,"updated_at":1461227832202,"updated_by":1},{"id":14,"uuid":"870c9362-7860-4090-a3bc-a32f062bcf93","key":"ghost_head","value":"<script>\nvar _hmt = _hmt || [];\n(function() {\n  var hm = document.createElement(\"script\");\n  hm.src = \"//hm.baidu.com/hm.js?d404bc0de3cceaf29a659e9b7ee4ed48\";\n  var s = document.getElementsByTagName(\"script\")[0]; \n  s.parentNode.insertBefore(hm, s);\n})();\n</script>","type":"blog","created_at":1434701396511,"created_by":1,"updated_at":1461227832204,"updated_by":1},{"id":15,"uuid":"86a707d4-6f36-4c45-8762-0cbaaee7067e","key":"ghost_foot","value":"","type":"blog","created_at":1434701396511,"created_by":1,"updated_at":1461227832204,"updated_by":1},{"id":16,"uuid":"aa5d255e-3685-48ae-96dc-e0eb2bb026a9","key":"labs","value":"{}","type":"blog","created_at":1434701396511,"created_by":1,"updated_at":1461227832205,"updated_by":1},{"id":17,"uuid":"9525bab0-63f9-4977-a872-c97fbb49c6ff","key":"navigation","value":"[{\"label\":\"Home\", \"url\":\"/\"}]","type":"blog","created_at":1434701396513,"created_by":1,"updated_at":1461227832206,"updated_by":1},{"id":18,"uuid":"b9b63585-93cf-4d52-a932-626de857b659","key":"isPrivate","value":"false","type":"blog","created_at":1434701396513,"created_by":1,"updated_at":1461227832206,"updated_by":1},{"id":19,"uuid":"c2562d92-5daf-4f7d-b0d2-a6ee8234e85c","key":"password","value":"","type":"blog","created_at":1434701396513,"created_by":1,"updated_at":1461227832207,"updated_by":1},{"id":20,"uuid":"5a97b5a7-333d-43f0-a503-5b8742439ecc","key":"activeApps","value":"[]","type":"app","created_at":1434701396513,"created_by":1,"updated_at":1434701396513,"updated_by":1},{"id":21,"uuid":"fc7779e9-8124-4513-bea8-e75a4550eb71","key":"installedApps","value":"[]","type":"app","created_at":1434701396514,"created_by":1,"updated_at":1470819309157,"updated_by":1},{"id":22,"uuid":"ae176223-4b20-4033-93c4-4c257790c067","key":"activeTheme","value":"vno","type":"theme","created_at":1434701396513,"created_by":1,"updated_at":1461227832203,"updated_by":1}],"tags":[{"id":1,"uuid":"1a94cdbe-2556-4efc-84f0-4c7bbc5641d2","name":"初出茅庐","slug":"getting-started","description":"初出茅庐","image":"/content/images/2015/06/Dispatch.jpg","hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1434701394189,"created_by":1,"updated_at":1435287045997,"updated_by":1}],"posts_tags":[{"id":2,"post_id":1,"tag_id":1},{"id":3,"post_id":10,"tag_id":1},{"id":4,"post_id":9,"tag_id":1},{"id":5,"post_id":8,"tag_id":1},{"id":6,"post_id":7,"tag_id":1},{"id":7,"post_id":6,"tag_id":1},{"id":8,"post_id":5,"tag_id":1},{"id":9,"post_id":4,"tag_id":1},{"id":10,"post_id":3,"tag_id":1},{"id":11,"post_id":2,"tag_id":1},{"id":12,"post_id":11,"tag_id":1},{"id":14,"post_id":12,"tag_id":1},{"id":15,"post_id":13,"tag_id":1},{"id":22,"post_id":16,"tag_id":1}],"apps":[],"app_settings":[],"app_fields":[]}}